#+TITLE: Scala
  Better Java.
  - [[http://futurismo.biz/archives/2449][Emacs で Scala 開発環境を構築 (Ensime) | Futurismo]]

** scala-mode2
   - https://github.com/hvesalai/scala-mode2
   - [[http://www.troikatech.com/blog/2014/11/26/ensime-and-emacs-as-a-scala-ide][ENSIME and Emacs as a Scala IDE - Troika Tech]]

#+begin_src emacs-lisp 
;; Scala Mode 2
(use-package scala-mode2
  :commands scala-mode
  :mode (("\\.scala$" . scala-mode) ("\\.sbt$" . scala-mode)))
#+end_src

** ensime
   ENhanced Scala Interaction Mode for Emacs.

   This step causes the ensime-mode to be started whenever
   scala-mode is started for a buffer. You may have to customize this step
   if you're not using the standard scala mode.
   - http://www.emacswiki.org/emacs/ScalaMode

#+begin_src emacs-lisp
(use-package ensime
  :commands (ensime-scala-mode ensime)
  :init
  (with-eval-after-load 'scala-mode
    (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
    (define-key scala-mode-map (kbd "<f10>") 'ensime-inf-switch)  
    (define-key scala-mode-map (kbd "RET") 'newline-and-indent)))
#+end_src

** sbt mode
   - https://github.com/hvesalai/sbt-mode

   ensime に依存しない方法
   - [[https://coderwall.com/p/z6riog/my-emacs-scala-development-environment][coderwall.com : establishing geek cred since 1305712800]]

#+begin_src emacs-lisp 
(use-package sbt-mode
  :init
  (add-hook 'sbt-mode-hook '(lambda ()
  ;; compilation-skip-threshold tells the compilation minor-mode
  ;; which type of compiler output can be skipped. 1 = skip info
  ;; 2 = skip info and warnings.
  (setq compilation-skip-threshold 1)

  ;; Bind C-a to 'comint-bol when in sbt-mode. This will move the
  ;; cursor to just after prompt.
  (local-set-key (kbd "C-a") 'comint-bol)

  ;; Bind M-RET to 'comint-accumulate. This will allow you to add
  ;; more than one line to scala console prompt before sending it
  ;; for interpretation. It will keep your command history cleaner.
  (local-set-key (kbd "M-RET") 'comint-accumulate)
  ))

  (add-hook 'scala-mode-hook '(lambda ()
   ;; sbt-find-definitions is a command that tries to find (with grep)
   ;; the definition of the thing at point.
   (local-set-key (kbd "M-.") 'sbt-find-definitions)

   ;; use sbt-run-previous-command to re-compile your code after changes
   (local-set-key (kbd "C-x '") 'sbt-run-previous-command)
   ))
)
#+end_src

** scala-electric-mode

#+begin_src emacs-lisp
;; (use-package scala-mode-feature-electric)
;; (add-hook 'scala-mode-hook
;;      (lambda ()
;;        (scala-electric-mode)))
#+end_src

** flycheck
   サポートしているのかな？一応書いとく.

#+begin_src emacs-lisp
(add-hook 'scala-mode-hook 'my/turn-on-flycheck-mode)
#+end_src

** sbtout
   sbt と flycheck を合体!
   - https://github.com/Mortimerp9/sbtout

   screen コマンドが必要. arch linux に screen がインストールできない!

#+begin_src emacs-lisp
(use-package sbtout
  :disabled t
  :config
  (flycheck-define-checker sbt
    "Checker for compilation with SBT"
    :command ("~/.emacs.d/el-get/repo/sbtout/sbtout.sh")
    :error-patterns
    ((error line-start "[error] " (file-name) ":" line ": " (message) line-end))
    :modes scala-mode))
#+end_src
