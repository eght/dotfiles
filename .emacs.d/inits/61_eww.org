* eww
  24.4 から搭載の Web ブラウザ.
   - https://github.com/emacs-mirror/emacs/blob/master/lisp/net/eww.el
   - http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/lisp/net/eww.el
   - [[http://www.gnu.org/software/emacs/manual/html_mono/eww.html#Advanced][Emacs Web Wowser]]

* Basics
** KeyBindings
   - N (eww-next-url)
   - P (eww-previous-url) 
   - l (eww-back-url) 
   - r (eww-forward-url) 
   - H (eww-list-histories) 
   - & (eww-browse-with-external-browser)
   - b (eww-add-bookmark)
   - B (eww-list-bookmarks)
   - q (quit-window)

   見にくいときは, R eww-readable をすると, 
   余計なリンクやサイドバーが消えて見えやすくなる.
   
#+begin_src emacs-lisp
(use-package eww
  :commands (eww-disable-images browse-url-with-eww)
  :bind (("C-x g g" . eww-search)
         ("C-c p" . browse-url-with-eww))
  :config
  (define-key eww-mode-map "r" 'eww-reload)
  (define-key eww-mode-map "c 0" 'eww-copy-page-url)
  (define-key eww-mode-map "p" 'scroll-down)
  (define-key eww-mode-map "n" 'scroll-up)
#+end_src

** default の検索エンジンを Google に変更

#+begin_src emacs-lisp
(setq eww-search-prefix "http://www.google.co.jp/search?q=")
#+end_src

*** dokudokgo
    default では, duckduckgo が設定されている. 軽いので.
    - https://duckduckgo.com/params

    こまかくパラメータ設定
    - kl=ja-jp 日本語
    - k1=-1    広告なし
    - kc=1     自動先読み
    - kf=-1    サイトアイコンなし
    - q =      検索文字

    => サイトアイコンなしは動かない.

#+begin_src emacs-lisp
;; (setq eww-search-prefix "https://duckduckgo.com/html/?kl=jp-jp&k1=-1&kc=1&kf=-1&q=")
#+end_src

** クイック検索
   - 検索結果にハイライトをつける.

#+begin_src emacs-lisp
(defun eww-search (term)
  (interactive "sSearch terms: ")
  (setq eww-hl-search-word term)
  (eww-browse-url (concat eww-search-prefix term)))

(add-hook 'eww-after-render-hook (lambda ()
				   (unless (eq eww-hl-search-word nil)
                                     (highlight-regexp eww-hl-search-word))
                                   (setq eww-hl-search-word nil)))
#+end_src

** 現在の url を 外部ブラウザ で開く (eww-browse-with-external-link)
   テキストブラウザは地味なので, ときには別のブラウザでも Web ページを閲覧したい.
   私は普段は conkeror を利用しているので, これで開きたい.

   以下の関数で今見ているページを外部ブラウザで開くことができる.
   &にキーバインドされている.

   #+begin_src text
   eww-browse-with-external-link
   #+end_src

   以下の設定で, ブラウザを conkeror に指定.
   - http://www.emacswiki.org/emacs/Conkeror
   - [[http://www.emacswiki.org/emacs/Conkeror][EmacsWiki: Conkeror]]

#+begin_src emacs-lisp
(when linux-p
  (setq shr-external-browser 'browse-url-generic))
#+end_src

** User-Agent の設定
   w3m でも同じようなはなしがあったような気がする. 
   モバイル用のほうが見やすかったり.
   - [[https://lists.gnu.org/archive/html/emacs-devel/2014-01/msg01659.html][Changing user agent on eww]]
   - [[http://rubikitch.com/2015/01/19/url-user-agent/][EWW などの Emacs における HTTP アクセスの User-Agent を変更する方法 | るびきち「日刊 Emacs 」]]

   るびきちさんの記事を参考: 以下で自分の User-Agent を調べる.
   - http://www.cman.jp/network/support/go_access.cgi

#+begin_src emacs-lisp
;;(defvar url-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; ja-jp; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")
;;(defun url-http-user-agent-string ()
;;  (format "User-Agent: %s\r\n" url-user-agent))
#+end_src

** 現在の url を eww で開く
  - [[http://tototoshi.hatenablog.com/entry/20100630/1277897703][カーソル位置の URL をブラウザで開く - tototoshi の日記]]
  - [[http://stackoverflow.com/questions/9033050/how-to-setup-emacs-to-folow-links-in-two-ways-depend-on-ctrl-key][browser - How to setup Emacs to folow links in two ways depend on CTRL key - Stack Overflow]]
  - [[http://ergoemacs.org/emacs/elisp_thing-at-point.html][Emacs Lisp: Using thing-at-point]]
  - [[http://tech.actindi.net/3498443215][アクトインディ技術部隊報告書]]

#+begin_src emacs-lisp
(defun browse-url-with-eww ()
  (interactive)
  (let ((url-region (bounds-of-thing-at-point 'url)))
    ;; url
    (if url-region
      (eww-browse-url (buffer-substring-no-properties (car url-region)
						      (cdr url-region))))
    ;; org-link
    (setq browse-url-browser-function 'eww-browse-url)
    (org-open-at-point)))
#+end_src

** eww 複数起動する
   バッファ名を rename すればいい.
   - http://ergoemacs.org/emacs/emacs_eww_web_browser.html

#+begin_src emacs-lisp
;; (defun eww-mode-hook--rename-buffer ()
;;   "Rename eww browser's buffer so sites open in new page."
;;   (rename-buffer "eww" t))
;; (add-hook 'eww-mode-hook 'eww-mode-hook--rename-buffer)
#+end_src

   - eww-list-buffers
     生成した eww を一覧で表示.

** 背景色の設定
  - [[http://rubikitch.com/2014/11/19/eww-nocolor/][Emacs24.4 組み込みブラウザ eww で目の疲れを 1/10 にする方法 | るびきち「日刊 Emacs 」]]

#+begin_src emacs-lisp
(defvar eww-disable-colorize t)
(defun shr-colorize-region--disable (orig start end fg &optional bg &rest _)
  (unless eww-disable-colorize
    (funcall orig start end fg)))
(advice-add 'shr-colorize-region :around 'shr-colorize-region--disable)
(advice-add 'eww-colorize-region :around 'shr-colorize-region--disable)
(defun eww-disable-color ()
  "eww で文字色を反映させない"
  (interactive)
  (setq-local eww-disable-colorize t)
  (eww-reload))
(defun eww-enable-color ()
  "eww で文字色を反映させる"
  (interactive)
  (setq-local eww-disable-colorize nil)
  (eww-reload))
#+end_src

** proxy 越え
  - [[http://rubikitch.com/2014/11/17/eww-proxy/][Emacs で proxy を使う設定 – この 1 行で eww も package も広告避けもバッチリ! | るびきち「日刊 Emacs 」]]

** 画像表示
   -  [[http://rubikitch.com/2014/11/25/eww-image/][Emacs24.4/Emacs25 の eww で画像を非表示にする方法! よりテキストブラウザらしく]]

#+begin_src emacs-lisp
(defun eww-disable-images ()
  "eww で画像表示させない"
  (interactive)
  (setq-local shr-put-image-function 'shr-put-image-alt)
  (eww-reload))
(defun eww-enable-images ()
  "eww で画像表示させる"
  (interactive)
  (setq-local shr-put-image-function 'shr-put-image)
  (eww-reload))
(defun shr-put-image-alt (spec alt &optional flags)
  (insert alt))
;; はじめから非表示
(defun eww-mode-hook--disable-image ()
  (setq-local shr-put-image-function 'shr-put-image-alt))
(add-hook 'eww-mode-hook 'eww-mode-hook--disable-image)
#+end_src

** 現在の URL をクリップボードにコピー
   eww-copy-page-url (w) で現在の URL をクリップボードにコピー.

#+begin_src emacs-lisp
(defun eww-copy-page-org-link ()
  (interactive)
  (my/copy-org-link (eww-current-url) (eww-current-title)))
(define-key eww-mode-map (kbd "0") 'eww-copy-page-org-link)
#+end_src

** 画面の表示幅変更
   - https://github.com/GriffinSchneider/emacs-config/blob/master/eww-customizations.el

#+begin_src emacs-lisp
(defvar gcs-shr-width 110)

(defadvice shr-insert-document (around force-shr-width activate)
  (let ((shr-width (min (1- (window-width)) gcs-shr-width)))
    ad-do-it))

(defun eww-increase-width ()
  (interactive)
  (make-local-variable 'gcs-shr-width)
  (setq gcs-shr-width (+ 10 gcs-shr-width))
  (eww-reload))
(defun eww-decrease-width ()
  (interactive)
  (make-local-variable 'gcs-shr-width)
  (setq gcs-shr-width (- gcs-shr-width 10))
  (eww-reload))

(define-key eww-mode-map (read-kbd-macro "+") 'eww-increase-width)
(define-key eww-mode-map (read-kbd-macro "-") 'eww-decrease-width)
#+end_src

* External Elisps
** eww-hatebu
    - [[http://d.hatena.ne.jp/syohex/20150116/1421424603][eww ではてなブックマーク数を表示する拡張を書いた - Life is very short]]    

#+begin_src emacs-lisp
(use-package eww-hatebu
  :config
  (eww-hatebu-setup)
  (custom-set-faces
   '(eww-hatebu-bookmarks
     ((t (:foreground "#A6E22E"))))))
#+end_src

  はてなブックマークは, メールからのブックマーク機能を利用する.
  wl-draft を起動して, コメント書いて送信.
  - [[http://b.hatena.ne.jp/help/entry/basic][ブックマークを投稿する - はてなブックマークヘルプ]]

** helm-eww-history
  - [[http://rubikitch.com/2014/11/26/helm-eww/][helm-eww.el – Emacs 組み込み Web ブラウザ eww で URL の履歴を helm する ]]

#+begin_src emacs-lisp
(use-package helm-eww-history)
#+end_src

** helm-eww-bookmarks
   - https://github.com/mytoh/helm-eww-bookmark/blob/master/helm-eww-bookmark.el

   seq が必要. TODO

#+begin_src emacs-lisp
;; (use-package helm-eww-bookmark
;;   :config
;;   (define-key eww-mode-map "B" 'helm-eww-bookmark))
#+end_src

** auto-hightlight-symbol で語句をハイライト
   -> auto-hightlight-symbol 参照.

* Unused
** conkerror のような番号づけ
    eww-lnum を入れると, conkeror のようにリンク先を選択できる.

    - https://github.com/m00natic/eww-lnum
    - [[http://rubikitch.com/2014/11/12/eww-lnum/][emacs eww-lnum.el : 組み込みブラウザ eww で Hit-a-Hint しようぜ ]]
    つまり, f を押すことで, リンク先に番号が振られるので,
    番号を選択することでリンク先を選択できる.

    -> ace-link でおきかえのため, 一旦 disable.

#+begin_src emacs-lisp
(use-package eww-lnum
  :disabled t
  :commands (eww-lnum-follow eww-lnum-universal)
  :init
  (define-key eww-mode-map "f" 'eww-lnum-follow)
  (define-key eww-mode-map "F" 'eww-lnum-universal)
  :config
  (defun eww-lnum-read-interactive--not-truncate-lines (&rest them)
    (let ((truncate-lines nil))
      (apply them)))
  (advice-add 'eww-lnum-read-interactive :around
	      'eww-lnum-read-interactive--not-truncate-lines))
#+end_src

* end of config
#+begin_src emacs-lisp
   )
#+end_src
