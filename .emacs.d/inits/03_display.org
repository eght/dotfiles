* Display
  表示関連.

* バッファ
  バッファの移動系は text.org に.

** 定義
   テキストを編集するための器.

** 画像ファイルを表示する
#+begin_src emacs-lisp
(if window-system (auto-image-file-mode t) (auto-image-file-mode nil))
#+end_src

** バッファ再読み込み
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

** 折り返し設定
  - [[http://d.hatena.ne.jp/beiz23/20090713/1247476145][emacs で truncate-lines を t にしているのに折り返ししてくれない. - beiz のノート]]
  - [[http://www.emacswiki.org/emacs/TruncateLines][Truncate Lines]]

#+begin_src emacs-lisp
;; 画面からはみ出たら切り捨て.
(set-default 'truncate-lines t)
;; C-x 3 でも はみ出し切り捨て
(setq truncate-partial-width-windows nil)
#+end_src

これではなぜか有効にならないので, 手動で変更する.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'toggle-truncate-lines)
#+end_src

** auto-fill-mode
   デフォルト搭載. 勝手に折り返してくれる.
   - [[http://www.emacswiki.org/emacs/AutoFillMode][EmacsWiki: Auto Fill Mode]]

#+begin_src emacs-lisp
;;; 一行が 80 字以上になった時には自動改行する
(setq fill-column 80)
;;(setq-default auto-fill-mode t)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** Popwin
   バッファのポップアップ表示. Popup Manager for Emacs.
   - [[https://github.com/m2ym/popwin-el][m2ym/popwin-el]]

 #+begin_src emacs-lisp
(use-package popwin
  :config
  (setq helm-samewindow nil)
  (setq display-buffer-function 'popwin:display-buffer)
  (setq popwin:special-display-config '(("*compilation*" :noselect t)
					;;("helm" :regexp t :height 0.4)
					("anything" :regexp t :height 0.4)
					))
  
;;  (push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
  (push '("*rspec-compilation*" :regexp t) popwin:special-display-config)
  (push '("*Oz Compiler*" :regexp t) popwin:special-display-config)
  (push '("^CAPTURE-.+\*.org$" :regexp t) popwin:special-display-config)
  (push '("*twittering-edit*" :regexp t) popwin:special-display-config)
  (push '("R data view" :regexp t) popwin:special-display-config)
  ;; (push '("^\*terminal<.+" :regexp t) popwin:special-display-config)
  (push '("*Google Translate*") popwin:special-display-config)
  (push "*Shell Command Output*" popwin:special-display-config) ;; M-!
  (push '(compilation-mode :noselect t) popwin:special-display-config) ;; M-x compile
  
;;  (push '("^\*Org .+\*$" :regexp t) popwin:special-display-config)
  (push '("*Agenda Commands*" :regexp t) popwin:special-display-config)
  ;; (push '("^\*Org Agenda*" :regexp t) popwin:special-display-config)

  (push '("*Completions*" :regexp t) popwin:special-display-config)
  
  ;; M-x dired-jump-other-window
  (push '(dired-mode :position bottom) popwin:special-display-config)
  
  ;; undo-tree
  (push '(" *undo-tree*" :width 0.3 :position right) popwin:special-display-config)
  )
 #+end_src

** stripe-buffer
   しましま表示
   - https://github.com/sabof/stripe-buffer

#+begin_src emacs-lisp
;; windows だと気持ち悪い色になる
(use-package stripe-buffer
  :if linux-p
  :config
  (add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
  ;;(add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
)
#+end_src

** savehist
   minibuffer の履歴保存

#+begin_src emacs-lisp
(use-package savehist
  :defer 20
  :config
  (savehist-mode t)
  (setq savehist-additional-variables 
  '(kill-ring search-ring regexp-search-ring)))
#+end_src

** narrow-indirect
   関節バッファでナローイング.
   - [[http://rubikitch.com/2015/01/07/narrow-indirect/][emacs narrow-indirect.el : ナローイングを間接バッファで行うようにカイゼンする!]]
   - http://www.emacswiki.org/emacs/narrow-indirect.el

#+begin_src emacs-lisp
;;(use-package narrow-indirect
;;  :init
;;  (define-key ctl-x-4-map "nd" 'ni-narrow-to-defun-indirect-other-window)
;;  (define-key ctl-x-4-map "nn" 'ni-narrow-to-region-indirect-other-window)
;;  (define-key ctl-x-4-map "np" 'ni-narrow-to-page-indirect-other-window))
#+end_src

** next-buffer/previous-buffer
   ブラウザの戻るボタンのように戻る. buffer-list の次, 前を選択.
   - [[http://www.emacswiki.org/emacs/SwitchingBuffers][EmacsWiki: Switching Buffers]]
   - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Buffer.html][Select Buffer - GNU Emacs Manual]]

#+begin_src emacs-lisp
(defhydra hydra-move-buffer (global-map "C-x")
  "buffer"
  ("[" next-buffer "next")
  ("]" previous-buffer "previous"))
#+end_src

** smooth-scroll
   スムーズにスクロールする.
   - [[http://qiita.com/ShingoFukuyama/items/429199542c38625c5554][Emacs のスクロールが滑らかになって気持ちいい! - Qiita]]
   - https://github.com/k-talo/smooth-scroll.el

#+begin_src emacs-lisp
(use-package smooth-scroll
  :config
  (smooth-scroll-mode t))
#+end_src

** バッファ削除
*** clean

    #+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

** writeroom-mode
   執筆モード
   - https://github.com/joostkremers/writeroom-mode
   - http://rubikitch.com/tag/package:writeroom-mode/

   visual-fill-column が必要.
   - https://github.com/joostkremers/visual-fill-column

#+begin_src emacs-lisp
(use-package visual-fill-column)
(use-package writeroom-mode
  :config
  ;; 横幅を 80 桁に設定
  (setq writeroom-width 80))
#+end_src

** centered-cursor-mode
   常に画面を中央に固定.
   - https://github.com/emacsmirror/centered-cursor-mode/blob/master/centered-cursor-mode.el
   - http://rubikitch.com/tag/m-x-scroll-lock-mode/

#+begin_src emacs-lisp
(use-package centered-cursor-mode)
#+end_src

* モードライン
** モードラインに時間を表示する
#+begin_src emacs-lisp
(display-time)
(setq display-time-day-and-date t)
#+end_src

** 現在の関数名をモードラインに表示
#+begin_src emacs-lisp
(which-function-mode 1)
#+end_src

* ファイル
** 定義
   名前がつけられたバッファ.

** saveplace
   一度訪れたファイルは次開くときはそこから開く.

#+begin_src emacs-lisp
(use-package saveplace
  :init
  (setq-default save-place t))
#+end_src

** recentf
    最近使ったファイルをメニューに表示たくさん履歴を残したい.

  #+begin_src emacs-lisp
(use-package recentf
  :bind ("C-c F" . recentf-open-files)
  :init
  (recentf-mode)
  :config
  (setq recentf-max-saved-items 2000)
  (setq recentf-auto-cleanup 10)
  (setq recentf-exclude '("/TAGS$" "/var/tmp/" ".recentf")))
 #+end_src

*** リモートファイルは無視

#+begin_src emacs-lisp
(setq recentf-keep '(file-remote-p file-readable-p))
#+end_src

** recentf-ext
   recentf の拡張.
   - [[http://d.hatena.ne.jp/rubikitch/20091224/recentf][人は俺を「recentf マスター」と呼ぶ]]
   - [[http://qiita.com/catatsuy/items/f9fad90fa1352a4d3161][Emacs を快適に使うファイル周りの設定紹介 - Qiita]]
   - [[http://qiita.com/icb54615/items/ed8ff0ac0443e0a9c7da][Emacs - 最近使ったファイル一覧を表示 - Qiita]]
   
#+begin_src emacs-lisp
(use-package recentf-ext)
#+end_src

** open-junk-file
   使い捨てファイルを開く.

#+begin_src emacs-lisp
(use-package open-junk-file
  :commands open-junk-file
  :init
  (define-key goto-map [?j] 'open-junk-file)
  :config
  ;;  (setq open-junk-file-format "~/tmp/%Y-%m-%d-%H%M%S.")
  (setq open-junk-file-format "~/Dropbox/howm/%Y-%m-%d-%H%M%S.org")
  (setq open-junk-file-find-file-function 'find-file))
#+end_src

** uniquify
   同名ファイルの区別

#+begin_src emacs-lisp
 (use-package uniquify
 :config
 (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src

** file 名の補間で大文字小文字を区別しない
#+begin_src emacs-lisp
(setq completion-ignore-case t)
#+end_src

* ウィンドウ
** 定義
   バッファの表示領域.
   
** 左右のバッファを F2 で交換する
  - http://d.hatena.ne.jp/supermassiveblackhole/20100625/1277436024
  
#+begin_src emacs-lisp
(defun swap-screen ()
  "Swap two screen,leaving cursor at current window."
  (interactive)
  (let ((thiswin (selected-window))
	(nextbuf (window-buffer (next-window))))
    (set-window-buffer (next-window) (window-buffer))
    (set-window-buffer thiswin nextbuf)))

(defun swap-screen-with-cursor ()
  "Swap two screen,with cursor in same buffer."
  (interactive)
  (let ((thiswin (selected-window))
	(thisbuf (window-buffer)))
    (other-window 1)
    (set-window-buffer thiswin (window-buffer))
    (set-window-buffer (selected-window) thisbuf)))

(global-set-key [f2] 'swap-screen)
(global-set-key [S-f2] 'swap-screen-with-cursor)
#+end_src

** 縦横のバッファを F3 で交換する
   - http://masutaka.net/chalow/2011-05-19-1.html

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-division ()
    "ウィンドウ 2 分割時に, 縦分割<->横分割"
    (interactive)
    (unless (= (count-windows 1) 2)
      (error "ウィンドウが 2 分割されていません. "))
    (let ((before-height)
          (other-buf (window-buffer (next-window))))
      (setq before-height (window-height))
      (delete-other-windows)
      (if (= (window-height) before-height)
          (split-window-vertically)
        (split-window-horizontally))
      (other-window 1)
      (switch-to-buffer other-buf)
      (other-window -1)))
  (global-set-key [f3] 'window-toggle-division)
#+END_SRC

** windown の動的リサイズ
   - http://d.hatena.ne.jp/mooz/20100119/p1

#+BEGIN_SRC emacs-lisp
;;  (defun window-resizer ()
;;    "Control window size and position."
;;    (interactive)
;;    (let ((window-obj (selected-window))
;;          (current-width (window-width))
;;          (current-height (window-height))
;;          (dx (if (= (nth 0 (window-edges)) 0) 1
;;                -1))
;;          (dy (if (= (nth 1 (window-edges)) 0) 1
;;                -1))
;;          c)
;;      (catch 'end-flag
;;        (while t
;;          (message "size[%dx%d]"
;;                   (window-width) (window-height))
;;          (setq c (read-char))
;;          (cond ((= c ?l)
;;                 (enlarge-window-horizontally dx))
;;                ((= c ?h)
;;                 (shrink-window-horizontally dx))
;;                ((= c ?j)
;;                 (enlarge-window dy))
;;                ((= c ?k)
;;                 (shrink-window dy))
;;                (t
;;                 (message "Quit")
;;                 (throw 'end-flag t)))))))
;;   
;;  (define-key global-map "\C-q" (make-sparse-keymap))
;;   
;;  (global-set-key "\C-q\C-r" 'window-resizer)
;;   
;;  (global-set-key "\C-ql" 'windmove-right)
;;  (global-set-key "\C-qh" 'windmove-left)
;;  (global-set-key "\C-qj" 'windmove-down)
;;  (global-set-key "\C-qk" 'windmove-up)
#+END_SRC

 hydra-window に合流.

#+begin_src emacs-lisp
;; (use-package hydra-examples)
;; (defhydra hydra-win-resize (global-map "C-z") ri
;;  "win-resize"
;;  ("l"  hydra-move-splitter-right "→")
;;  ("h"  hydra-move-splitter-left  "←")
;;  ("k"  hydra-move-splitter-up    "↑")
;;  ("j" hydra-move-splitter-down  "↓")
;;  ("="  balance-windows           "Balance"))
#+end_srcN
x1
** window 間の移動

   #+begin_src emacs-lisp
(use-package hydra-examples)
(global-set-key
 (kbd "C-M-o")
 (defhydra hydra-window ()
   "window"
   ("b" windmove-left)
   ("n" windmove-down)
   ("p" windmove-up)
   ("f" windmove-right)
   ("<right>"  hydra-move-splitter-right "→")
   ("<left>"  hydra-move-splitter-left  "←")
   ("<up>"  hydra-move-splitter-up    "↑")
   ("<down>" hydra-move-splitter-down  "↓")
   ("="  balance-windows           "Balance")
   ("a" (lambda ()
          (interactive)
          (ace-window 1)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body))
        "ace")
   ("v" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right))
        "vert")
   ("x" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down))
        "horz")
   ("s" (lambda ()
          (interactive)
          (ace-window 4)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body))
        "swap")
   ("d" (lambda ()
          (interactive)
          (ace-window 16)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body))
        "del")
   ("o" delete-other-windows "1" :color blue)
   ("i" ace-maximize-window "a1" :color blue)
   ("q" nil "cancel")))
#+end_src

* フレーム
** 定義
   ウィンドウシステムにおけるウィンドウを Emacs では, フレームと呼ぶ.
   1 つのフレームは, 複数のウィンドウからなる.

** ツールバーを消す
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** emacs -nw で起動した時にメニューバーを消す
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** スクロールバーを消す
** linum: 行番号の表示
   特定の major-mode のときは抑止
   - https://github.com/Khady/emacs.d/blob/master/setup-linum.el

#+begin_src emacs-lisp
(use-package setup-linum
  :init
  ;; daemon 起動中に linum-mode を有効にすると落ちる.
  (add-hook 'after-init-hook 'global-linum-mode t)
  ;; (add-hook 'after-init-hook 'global-linum-mode 0)
  :config
  ;; linum を利用しないメジャーモードを列挙
  (setq linum-disabled-modes-list
 	'(eshell-mode
	  wl-summary-mode
	  compilation-mode
	  dired-mode
	  doc-view-mode
	  image-mode
	  pdf-view-mode
	  eww-mode)))
#+end_src

#+begin_src emacs-lisp
(set-scroll-bar-mode nil)

(when emacs25.0-p
  ;; 家の archlinux 環境たけ有効にしておく
  (horizontal-scroll-bar-mode -1))
#+end_src

*** linum を toggle する
    - [[http://qiita.com/yyamamot/items/df430d4e725ea38ffc9f][Emacs で行番号表示をトグルする - Qiita]]

#+begin_src emacs-lisp
(defun toggle-linum-lines ()
  "toggle display line number"
  (interactive)
  (setq linum-format "%4d ")
  (linum-mode
   (if linum-mode -1 1)))
(define-key global-map (kbd "C-x C-l") 'toggle-linum-lines)
#+end_src

*** linum を軽くするおまじない
    - [[http://d.hatena.ne.jp/daimatz/20120215/1329248780][linum-mode を軽くする - daimatz メモ]]

#+begin_src emacs-lisp
(setq linum-delay t)

(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #'linum-update-current))
#+end_src

** 最大化表示
   Emacs は世界を統べるものなので, 最大化してもまったく問題ない.
#+begin_src emacs-lisp
;; スクリーンの最大化
(set-frame-parameter nil 'fullscreen 'maximized)

;; フルスクリーン
;; (set-frame-parameter nil 'fullscreen 'fullboth)

(defun ome-toggle-fullscreen ()
  "Toggle full screen"
  (interactive)
  (set-frame-parameter
   nil 'fullscreen
   (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))

;; (global-set-key (kbd "<f11>") 'ome-toggle-fullscreen)
#+end_src

** ポップアップを消す

#+begin_src emacs-lisp
(setq use-dialog-boxn nil)
(defalias 'message-box 'message)
#+end_src

