* 初期設定
  はじめにやっておきたいことをここに書く.

* マクロ
** 環境による場合分け
  環境による場合分けのマクロを定義.
  - http://d.hatena.ne.jp/tomoya/20090811/1250006208

#+begin_src emacs-lisp 
(defun x->bool (elt) (not (not elt)))

;; emacs-version predicates
(setq emacs22-p (string-match "^22" emacs-version)
      emacs23-p (string-match "^23" emacs-version)
      emacs23.0-p (string-match "^23\.0" emacs-version)
      emacs23.1-p (string-match "^23\.1" emacs-version)
      emacs23.2-p (string-match "^23\.2" emacs-version)
      emacs24.3-p (string-match "^24\.3" emacs-version)
      emacs24.4-p (string-match "^24\.4" emacs-version)
      emacs25.0-p (string-match "^25\.0" emacs-version)
      )

;; system-type predicates
(setq darwin-p  (eq system-type 'darwin)
      ns-p      (eq window-system 'ns)
      carbon-p  (eq window-system 'mac)
      linux-p   (eq system-type 'gnu/linux)
      colinux-p (when linux-p
		  (let ((file "/proc/modules"))
		    (and
		     (file-readable-p file)
		     (x->bool
		      (with-temp-buffer
			(insert-file-contents file)
			(goto-char (point-min))
			(re-search-forward "^cofuse\.+" nil t))))))
      cygwin-p  (eq system-type 'cygwin)
      nt-p      (eq system-type 'windows-nt)
      meadow-p  (featurep 'meadow)
      windows-p (or cygwin-p nt-p meadow-p))
#+end_src

** フォルダを再帰的にロードパスに追加
   Special Thanks
   - http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html

#+begin_src emacs-lisp
;; @ load-path
;; for Emacs 23 under
(defvar user-emacs-directory "~/.emacs.d")

;; load-path の追加関数
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))

;; load-path に追加するフォルダ
;; 2 つ以上フォルダを指定する場合の引数 => (add-to-load-path "elisp" "xxx" "xxx")
(add-to-load-path "elisp" "inits" "el-get" "local" "mylisp")
#+end_src

* use-package
   autoload/eval-after-load の記述を簡潔に書くための elisp.
   - https://github.com/jwiegley/use-package

   記述方法は以下の記事がとても詳しい. ここでは省略.
   - [[http://qiita.com/kai2nenobu/items/5dfae3767514584f5220][Emacs - use-package で可読性の高い init.el を書く - Qiita]]
   - [[http://rubikitch.com/2014/09/09/use-package/][emacs use-package.el : Emacs の世界的権威が行っている最先端ラクラク init.el 整理術]]
   - [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][My Emacs Configuration with use-package – lunarsite]]

   参考になりすぎる init.el
   - https://github.com/kawabata/dotfiles/blob/master/.emacs.d/init.el

#+begin_src emacs-lisp
(package-initialize nil)
(el-get-bundle use-package)

;; use-package が存在しないときはなにもしない
(add-to-list 'load-path "~/.emacs.d/el-get/repo/use-package")
(unless (require 'use-package nil t)
  (defmacro use-package (&rest args)))

;; for debug 0.01 秒以上 load にかかったら report を出す.
;; (setq use-package-verbose t)
#+end_src
   
** パッケージが存在しないとき
  もしパッケージが存在しないときは, 以下のようなメッセージが吐かれる.

  Could not load package hoge

  *Message* バッファを検索して, エラーがないかチェックする.

  かつて, :ensure t で el-get のサポートがあったが削除された.
   
  use-package の機能ではなく, 
  el-get の機能で, el-get-is-lazy というものがあるので.
  - https://github.com/jwiegley/use-package/issues/51

* el-get
  Emacs 用パッケージマネージャー
  - https://github.com/dimitri/el-get
  - [[http://d.hatena.ne.jp/tarao/20150221/1424518030][Cask はもう古い, これからは El-Get - いまどきの Emacs パッケージ管理 ]]
    
** el-get 同期 Package
#+begin_src emacs-lisp 
(defvar my/el-get-packages-all
  '(
    ;; 03_display
    popwin
    switch-window
    isearch-dabbrev
    open-junk-file
    iy-go-to-char
    key-chord
    jump-char
    recentf-ext
    stripe-buffer

    ;; 20_text
    hydra
    swiper
    yasnippet
    dired-k
    migemo
    undo-tree
    define-word
    auto-complete
    anzu
    auto-highlight-symbol
    highlight-symbol
    multiple-cursors
    bm
    emacs-async
    pcre2el
    ht
    iedit
    codic
    search-web
    wgrep
    expand-region
    ag
    auto-capitalize

    ;; 21_ace
    ace-jump-mode
    ace-jump-buffer
    ace-isearch
    ;; ace-link
    ace-jump-zap
    ace-window
    ace-jump-helm-line

    ;; programming
    magit
    flycheck
    flycheck-color-mode-line
    quickrun
    projectile
    gtags
    gist
    cool-mode
    yafolding
    aggressive-indent-mode
    marshal

    ;; lisp
    smartrep
    smartparens
    lispxmp

    clojure-mode
    cider
    ac-cider
    4clojure
    clojure-cheatsheet
    inf-clojure
    ;; clj-refactor  なんかインストール時にエラーする
    clojure-snippets
    squiggly-clojure
    
    ;; minor-lang
    yaml-mode
    markdown-mode
    plantuml-mode
    conkeror-minor-mode

    ;; ruby
    ruby-block
    robe-mode
    ruby-electric
    rspec-mode
    ruby-refactor
    rcodetools
    inf-ruby

    ;; c/c++
    semantic-refactor
    ;; function-args
    clang-complete-async
    auto-complete-c-headers

    ;; python
    python-mode
    jedi
 
   ;; java
    eclim
    auto-java-complete
    log4j-mode
    ;; jtags-mode
    ant

    ;; haskell
    haskell-mode 
    ghc-mod

    ;; scala
    sbtout
    ;; scala-mode
    scala-mode2
    ensime
    sbt-mode

    ;; web
    php-mode
    ac-php

    ;; 40_helm.org
    helm
    helm-pydoc
    helm-ls-git
    helm-descbinds
    helm-orgcard
    helm-gtags
    helm-migemo
    helm-kaomoji
    helm-wl-address
    helm-google
    helm-etags-plus
    helm-swoop
    helm-c-yasnippet
    helm-emms
    helm-make
    helm-github-issues
    helm-open-github
    helm-ag
    helm-flyspell
    helm-eww-bookmark
    helm-flycheck
    helm-bm
    helm-cscope
    helm-hatena-bookmark
    helm-dash

    ;; 50_org-mode.org
    org-mode
    org-journal
    org-pandoc
    org-textile
    org-gcal
    org-download
    org-multiple-keymap
    org-bullets
    org-projectile
    org-pomodoro
    ;; org-password-manager
    org-cliplink
    org2blog
    ox-rst
    ox-wk
    clocktable-by-tag
    cde

    ;; 60_utility
    ;; howm
    ;; direx
    tempbuf
    migemo
    magit
    emms
    ledger-mode

    minimap
    e2wm
    e2wm-direx
    psession
    elscreen-persist
    revive
    imenu-anywhere
    twittering-mode
    erc-hl-nicks
    erc-nick-notify

    emms-player-mpv-jp-radios

    ;; 61_terminal
    elscreen
    elscreen-wl
    exec-path-from-shell
    shell-toggle
    shell-pop

    eshell-autojump
    multi-eshell
    eshell-z

    neotree

    ;; 61_wanderlust
    wanderlust
    ;; 90_colro
    rainbow-mode
    color-theme
    ubuntu-theme
    molokai-theme
    rainbow-delimiters
    xterm-color

    ;; 未整理
    calfw

    eww-lnum

    ddskk
    ac-skk
    ac-ja

    hl-anything
    eldoc-extension

    ess-R-data-view
    ess-R-object-popup
    ctable

    vlfi
    emacs-refactor
    keisen-ext

    monokai-emacs

    powerline
    viewer
    eww-hatebu

    git-gutter
    csv-mode
    r-autoyas
    dired-filetype-face
    jazzradio
    rake
    origami
    smart-newline
    column-enforce-mode
    smooth-scroll
    hackernews
    reddit-mode

    writeroom-mode
    visual-fill-column
    engine-mode
    web
    el-pocket
    electric-spacing
    ggtags
    imenus
    eshell-prompt-extras
    zlc
    c-eldoc
    nyan-mode
    srep
    undohist
    svg-mode-line-themes
    web-mode
    smart-mode-line
    impatient-mode
    volume-el
    clipmon
    rainbow-mode
    term-run
    solarized-emacs
    pcache
    sx
    git-link
    gntp
    browse-at-remote
    real-auto-save
    omni-tags
    git-timemachine
    minitest
    avy
    vbasense
    visual-basic-mode
    ;; pdf-tools
    flyspell
    centered-cursor-mode
    pangu-spacing
    ibuffer-projectile
    cloc
    geiser
    ;; helm-slime エラーするので封印
;;    ac-slime
    moz-markdown-viewer
    helm-github-stars
    mmm-mode
    aoj-submit
    cfparser
    joseph-single-dired
    visible-mark
    f
    marshal
    pangu-spacing
    cloc
    geiser
    inf-clojure
    4clojure
    clojure-cheatsheet
    clojure-snippets
    ac-slime
    emms-player-mpv-jp-radios
    aoj-submit
    neotree
    )
  "A list of packages to install from el-get at launch.")
#+end_src

** el-get config

#+begin_src emacs-lisp
;; マシンごとの設定
(when emacs25.0-p
  (if linux-p
    (setq el-get-emacs "/usr/local/bin/emacs")))

;; 通知は minibuffer のみ
(setq el-get-notify-type 'message)

;; 同期
;; (el-get 'sync my/el-get-packages-all)

(defun my-el-get-sync ()
   (interactive)
   (el-get 'sync my/el-get-packages-all))
#+end_src

*** el-get-is-lazy
   パッケージが存在しないときは, el-get で取得する.

   追加しわすれに気づけないので, コメントアウト.

#+begin_src emacs-lisp
;; (setq el-get-is-lazy t)
#+end_src

*** Windows
   - [[https://github.com/dimitri/el-get/wiki/Installation-on-Windows][Installation on Windows · dimitri/el-get Wiki]]
   - [[http://stackoverflow.com/questions/17219643/cant-install-emacs-el-get-package-emacs-cant-connect-to-the-internet][windows - can't install emacs el-get package, emacs can't connect to the internet - Stack Overflow]]
   - [[https://github.com/Bruce-Connor/paradox/issues/5][fails without GnuTLS · Issue #5 · Bruce-Connor/paradox]]

   gist にアクセスできない...

   Linux だと, gnutls-bin をいれる.

 #+begin_src text
Contacting host: api.github.com:443
Opening TLS connection to `api.github.com'...
Opening TLS connection with `gnutls-cli --insecure -p 443 api.github.com'...failed
Opening TLS connection with `gnutls-cli --insecure -p 443 api.github.com --protocols ssl3'...failed
Opening TLS connection with `openssl s_client -connect api.github.com:443 -no_ssl2 -ign_eof'...failed
Opening TLS connection to `api.github.com'...failed
 #+end_src
