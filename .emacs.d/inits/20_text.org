* Text
  テキスト編集. Emacs の底力を発揮する!

* 閲覧
** Read Only Mode
   - M-x toggle-read-only (C-x C-q) で現在開いているテキストを
     読み取り専用にすることができる
     
   - M-x find-file-read-only で読み取り専用で開くことができる.
     解除は, toggle-read-only で.

   参考:
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Read-Only-Buffers.html][Read Only Buffers - GNU Emacs Lisp Reference Manual]]

*** ログファイルは readonly で開く.
    -> viewer へ.

   #+begin_src emacs-lisp
   ;; (add-to-list 'auto-mode-alist '("\\.log$" . read-only-mode))
   #+end_src

** view-mode
    閲覧モード.
    - [[http://d.hatena.ne.jp/rubikitch/20081104/1225745862][Ctrl+ 中指か薬指を使うキー操作が多い Emacs で指の負担を軽くする方法]]
    - [[http://d.hatena.ne.jp/khiker/20061027/1161982764/][view-mode - とりあえず暇だったし何となく始めたブログ]]
    - [[http://valvallow.blogspot.jp/2010/05/emacs-view-mode.html][vallog: Emacs view-mode がステキ便利]]

#+begin_src emacs-lisp
(use-package view
  :config
  (setq view-read-only t)

  ;; ショートカット
  (with-eval-after-load 'key-chord
    (key-chord-define-global "jk" 'view-mode))

  ;; less っぼく.
  (define-key view-mode-map (kbd "p") 'View-scroll-page-backward)
  (define-key view-mode-map (kbd "n") 'View-scroll-page-forward)
  (define-key view-mode-map (kbd "v") 'read-only-mode)

  ;; vi ぼく
  (define-key view-mode-map (kbd "h") 'backward-char)
  (define-key view-mode-map (kbd "l") 'forward-char)
  (define-key view-mode-map (kbd "j") 'next-line)
  (define-key view-mode-map (kbd "k") 'previous-line))
#+end_src

** viewer-mode
    View-mode extension
    - [[http://emacswiki.org/emacs/viewer.el][EmacsWiki: viewer.el]]

#+begin_src emacs-lisp
(use-package viewer
  :config
  ;; 書き込み不能ファイルは書き込みにならないように
  (viewer-stay-in-setup)
  
  ;; view-mode のとき mode-line に色付け
  (setq viewer-modeline-color-unwritable "blue")
  (setq viewer-modeline-color-view "purple")
  (viewer-change-modeline-color-setup)

  ;; log ファイルは viewer
  (setq view-mode-by-default-regexp "\\.log$"))
#+end_src

** vlfi
   View Large File. これはけっこう便利.
   - https://github.com/m00natic/vlfi

   #+begin_src emacs-lisp
   (use-package vlf-setup)
   #+end_src

** origami
   A folding minor mode for Emacs 
   - https://github.com/gregsexton/origami.el
   - [[http://rubikitch.com/2015/01/03/origami/][elisp,Clojure,C 系言語で org-mode 風の折畳みをする| るびきち「日刊 Emacs 」]]

#+begin_src emacs-lisp
(use-package origami
  :init
  (add-hook 'view-mode-hook 'view-mode-hook--origami)
  :commands view-mode-hook--origami
  :config
  (define-minor-mode origami-view-mode
    "TAB に origami の折畳みを割り当てる"
    nil "折紙"
    '(("\C-i" . origami-cycle))
    (or origami-mode (origami-mode 1)))
  
  (defun origami-cycle (recursive)
    "origami の機能を org 風にまとめる"
    (interactive "P")
    (call-interactively
     (if recursive 'origami-toggle-all-nodes 'origami-toggle-node)))
  (defun view-mode-hook--origami ()
    (when (memq major-mode (mapcar 'car origami-parser-alist))
      (origami-view-mode (if view-mode 1 -1)))))
#+end_src

** itail
   Emacs で tail するモード. ログ解析用.
   - https://github.com/re5et/itail

#+begin_src emacs-lisp
(use-package itail)
#+end_src

* 編集
** cua-mode
   矩形編集.

   #+begin_src emacs-lisp
   (cua-mode t)
   (setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化
   (define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)
   #+end_src
   
** multiple-cursors
   Awesome Emacs Rocks! http://shibayu36.hatenablog.com/entry/2013/12/30/190354
   - [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]]

   どうも, no window だとうまく動作しない.
   うまく動かないとき, ~/.emacs.d/.mc-lists.el を削除したらうまくいくようになった.

   - https://github.com/magnars/multiple-cursors.el/issues/121

   RET が multiple-cursor-mode に割り当てられているため,
   改行するためには, C-m をする必要がある.

   #+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (("C-M-c" . mc/edit-lines)
	 ("C-M-r" . mc/mark-all-in-region)
	 ;; ("C-]" . mc/mark-next-like-this)
	 ("C-M-]" . mc/mark-previous-like-this)
	 ("C-c C-]" . mc/mark-all-like-this))
  :init
  (global-set-key
    (kbd "C-]")  
    (defhydra hydra-mc ()
      "multiple-cursor"
      ("C-]" mc/mark-next-like-this "next")
      ("n"   mc/mark-next-like-this "next")
      ("p"   mc/mark-previous-like-this "previous")
      ("m"   mc/mark-more-like-this-extended "more")
      ("u"   mc/unmark-next-like-this "unmark-next")
      ("U"   mc/unmark-previous-like-this "unmark-previous")
      ("s"   mc/skip-to-next-like-this "skip-to-next")
      ("S"   mc/skip-to-previous-like-this "skip-to-previous")
      ("*"   mc/mark-all-like-this "all")
      ("d"   mc/mark-all-like-this-dwim "all-like-this-dwim")
      ("i"   mc/insert-numbers "insert-numbers")
      ("o"   mc/sort-regions "sort-regions")
      ("O"   mc/reverse-regions "reverse-regions"))))
#+end_src

** expand-region
   Awesome Emacs Rocks! 

   リージョンを広げる.
   - https://github.com/magnars/expand-region.el
   - http://d.hatena.ne.jp/syohex/20120117/1326814127

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("C-\\" . er/expand-region)
	 ("C-M-\\" . er/contract-region))
  :config
  ;; 選択ができるようにしておく
  ;; (transient-mark-mode t)
)
#+end_src

** yasnippet
   スニペット管理
   - https://github.com/capitaomorte/yasnippet
   - [[http://www.emacswiki.org/emacs/Yasnippet][EmacsWiki: Yasnippet]]
   - [[http://fukuyama.co/yasnippet][yasnippet 8.0 の導入からスニペットの書き方- Web 学び]]
   - [[http://konbu13.hatenablog.com/entry/2014/01/12/113300][emacs 最強スニペット展開プラグイン yasnippet.el - プログラミングのメモ]]

   yas/ と書いてあるのは, ver8.0 以下の古い書き方.yas-と書くのが最新.

   記法はここにある.
   - [[http://yasnippet-doc-jp.googlecode.com/svn/trunk/doc-jp/snippet-development.html][Writing snippets]]

#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (global-unset-key "\C-xi")
  :bind (("C-x i i" . helm-yas-complete)
	 ("C-x i v" . helm-yas-visit-snippet-file)
	 ;; helm-yas-xxx は autoload されているっぽい.
	 ("C-x i n" . yas-new-snippet))
  :defer 20
  :config
  (yas-global-mode 1)  
  (setq yas-snippet-dirs
      '("~/.emacs.d/snippets" ;; my snipets dir
        "~/.emacs.d/el-get/repo/yasnippet/snippets")) ;; original repo dir

  ;; メニューは使わない
  (setq yas-use-menu nil))
#+end_src

*** Tips
**** 日付をテンプレートに挿入.
     *`(format-time-string "%y%m%d%H%M%S")`* とかく.

** auto-complete
   自動補完を実現する elisp.

   github:
   - https://github.com/auto-complete/auto-complete

   wiki:
   - http://www.emacswiki.org/emacs/auto-complete-extension.el

   manuals:
   - http://cx4a.org/software/auto-complete/index.ja.html
   - http://cx4a.org/software/auto-complete/manual.ja.html

   #+begin_src emacs-lisp
(use-package auto-complete
  :disabled t
  :bind   ("M-/" . auto-complete)
  :config
  (require 'auto-complete-config)
  (ac-config-default)
  ;; グローバルで auto-complete を利用
  (global-auto-complete-mode t)

  ;; 追加メジャーモード
  ;; -> org-mode と auto-complete の共用はバクあり.
  (add-to-list 'ac-modes 'org-mode)

  ;; メニュー表示を遅延
  ;; (setq ac-auto-show-menu 0.5)
  (setq ac-auto-show-menu t)


  (setq ac-menu-height 20)          ; 高さは 20 まで.

  ;; 補完候補が 1 つのときはそれを採用.
  (setq ac-dwim t)

  (setq ac-auto-start nil)         ; 補完の自動スタートは抑止.
  ;; (setq ac-auto-start 3)           ; 3 文字以上から補完スタート
  (setq ac-auto-show-menu 0.8)     ; 0.8 秒でメニュー表示
  (setq ac-use-comphist t)         ; 補完候補をソート
  (setq ac-candidate-limit nil)    ; 補完候補表示を無制限に
  (setq ac-use-menu-map t)         ; C-n / C-p で選択

  ;; デフォルトは C-n or C-p
  ;; Ctrl ではなくて, Alt に割り当てる.
  (define-key ac-menu-map (kbd "M-n") 'ac-next)
  (define-key ac-menu-map (kbd "M-p") 'ac-previous)
  
  ;; ヘルプを表示
  (define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
   #+end_src

*** 情報源登録  
   ac-sources リストの最後に append で追加するだけ.

#+begin_src emacs-lisp
(setq ac-sources (append ac-sources '(ac-source-abbrev)))
(setq ac-sources (append ac-sources '(ac-source-dictionary)))
(setq ac-sources (append ac-sources '(ac-source-words-in-buffer)))
(setq ac-sources (append ac-sources '(ac-source-yasnippet)))
#+end_src

   情報源の作り方
   - http://dev.ariel-networks.com/wp/documents/aritcles/emacs/part10  
   - http://fukuyama.co/emacs-auto-complete

*** ac-helm
    helm インターフェースを利用する. これは多げさかな. .

#+begin_src emacs-lisp
(use-package ac-helm
  :disabled t
  :bind  ("C-:" . ac-complete-with-helm)
  :config
  (define-key ac-complete-mode-map (kbd "C-:") 'ac-complete-with-helm))
#+end_src

*** end of config
    #+begin_src emacs-lisp
    )
    #+end_src


** undo-tree
   C-x u にバインディング.

#+begin_src emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode))
#+end_src

** keisen
   罫線を引く
   - http://www.pitecan.com/Keisen/keisen.el
   - http://www.bookshelf.jp/soft/meadow_36.html

   ボヤキ: 
   - [[http://futurismo.biz/archives/1972][秀丸のような罫線マクロないかな・・・ | Futurismo]]
   - http://hide.maruo.co.jp/lib/macro/draw310.html

  -> なんか線が微妙にずれるので, picture-init に乗り換え.

  #+begin_src emacs-lisp
(use-package keisen
  :disabled t
  :bind (("C-M-<right>" . keisen-right-move)
	 ("C-M-<left>" . keisen-left-move)
	 ("C-M-<up>" . keisen-up-move)
	 ("C-M-<down>" . keisen-down-move)))
  #+end_src

** picture-mode
   図形を書くためのツール. Emacs 標準実装.
   - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Picture-Mode.html][Picture Mode - GNU Emacs Manual]]
   - [[http://tototoshi.hatenablog.com/entry/20100614/1276520246][Emacs picture-mode でお絵描き - tototoshi の日記]]

   なんか, picture-mode-exit が動作しないのだが...

** keisen-ext
   picture-mode の拡張
   - [[http://d.hatena.ne.jp/tamura70/20100125/ditaa][Emacs picture-mode の拡張 - 屯遁のパズルとプログラミングの日記]]
   - [[http://hide.maruo.co.jp/lib/macro/draw310.html][秀まるおのホームページ (サイトー企画)-OASYS 風罫線マクロ Ver 3.10]]

#+begin_src emacs-lisp
(use-package keisen-ext)
#+end_src

** artist-mode
   マウスで絵がかけるモード. Emacs 標準装備.
   - [[http://emacs-fu.blogspot.jp/2009/01/drawing-pictures.html][emacs-fu: drawing pictures]]

** clipmon
   自動でクリップボード貼り付け.
   - https://github.com/bburns/clipmon

   うごかないな...

#+begin_src emacs-lisp
(use-package clipmon
  :config
  (setq clipmon-autoinsert-sound nil)
  (global-set-key (kbd "<M-f2>") 'clipmon-autoinsert-toggle))
#+end_src

** srep
   Emacs で auto-fill のようなもの.
   - [[http://d.hatena.ne.jp/ken_m/20111219/1324318727][Emacs で Excel のオートフィルのようなことをする - "E" for ...]]

   #+begin_src emacs-lisp
   (use-package srep)
   #+end_src

   1,2,3... とするには, ascii 改行 (C-q C-j) を delimiter で指定.
   - [[http://ergoemacs.org/emacs/emacs_line_ending_char.html][Emacs: Newline Representation ^M ^J ^L]]

* 移動
  まずは, 基本まとめ.
 
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][Mark Ring - GNU Emacs Manual]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Setting-Mark.html][Setting Mark - GNU Emacs Manual]]
  - [[http://www.bookshelf.jp/texi/emacs-20.6-man-jp/emacs_10.html][GNU Emacs マニュアル: マークとリージョン]]
  - [[http://d.hatena.ne.jp/whitypig/20100308/1267990959][pop-global-mark を使えないボクって. . . - GONE WITH THE MEDICINE]]

  | C-SPC             | マークをセット          | mark-ring               |
  | C-x C-x           | マークとカーソルを swap | exchange-point-and-mark |
  | C-x C-SPC         | 過去のマークへジャンプ  | pop-global-mark         |

  mark-ring と mark-global-ring は違う.

  | C-x r SPACE [a-z] | register に登録         |                         |
  | C-x r j [a-z]     | jump to that register   |                         |

  helm-all-mark-rings が強力.

#+begin_src emacs-lisp
;; default is 16
(setq global-mark-ring-max 64)
#+end_src
** iy-go-to-char
   前後の char へ移動する. ace-jump-mode があれば不要かな. . .
   - https://github.com/doitian/iy-go-to-char

#+begin_src emacs-lisp
;; (use-package iy-go-to-char
;;   :config
;;   (global-set-key (kbd "C-c f") 'iy-go-to-char)
;;   (global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
;;   (global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
;;   (global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
;;   (global-set-key (kbd "C-c f") 'iy-go-up-to-char)
;;   (global-set-key (kbd "C-c F") 'iy-go-up-to-char-backward)

;;   (add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
;; )
#+end_src

** jump-char
   ;で前. , で後ろ. C-c C-c で ace-jump-mode に切り替え.

   - https://github.com/lewang/jump-char

   つかわなくなった..

   #+begin_src emacs-lisp
(use-package jump-char
  :disabled t
  :config
  ;; (global-set-key (kbd "C-c f") 'jump-char-forward)
  ;; (global-set-key (kbd "C-c F") 'jump-char-backward)
;;  (eval-after-load 'key-chord
;;    '(progn
;;       (key-chord-define-global "jk" 'jump-char-forward)
;;       (key-chord-define-global "jh" 'jump-char-backward)
;;       ))
  )
#+end_src
** カーソル移動を速くする
   - [[https://bbs.archlinux.org/viewtopic.php?id=69759][Keyboard repeat messed up after update to Xorg 1.6 / Applications
     & Desktop Environments / Arch Linux Forums]]
   - [[http://shigemk2.hatenablog.com/entry/20130420/1366450632][Emacs のカーソル移動の速度を上げる軌跡 - by shigemk2]]
   以下を.xinitrc 書く

#+begin_src text
    xset r rate 200 25
#+end_src

  windows は コントロールパネル > キーボードから.
  - [[http://superuser.com/questions/388160/keyboard-repeat-rate-repeat-delay-values-in-win7][windows 7 - Keyboard - Repeat Rate/Repeat Delay values in Win7 - Super User]]

  レジストリをいじると, 31 以下に設定できる.
  - [[http://d.hatena.ne.jp/bigchu/20090224/1235477173][windows でキーボードのカーソル移動速度を上げる. ばびゅーん. - 酒は血液, 呑んだら献血]]

* 検索・置換
** ag
   高速 grep

   #+begin_src emacs-lisp
(use-package ag
  :defer t
  :config
  (custom-set-variables
   '(ag-highlight-search t)  ; 検索結果の中の検索語をハイライトする
   '(ag-reuse-window 'nil)   ; 現在のウィンドウを検索結果表示に使う
   '(ag-reuse-buffers 'nil)) ; 現在のバッファを検索結果表示に使う
  )
   #+end_src

** migemo
   日本語をロ-マ字検索.

   windows 用バイナリ.
   - [[http://www.kaoriya.net/software/cmigemo/][C/Migemo - KaoriYa]]
    
#+begin_src emacs-lisp
  ;; for emacs 24.3
  ;; http://wp.kncn.net/archives/6025
  (setq search-whitespace-regexp nil)

(use-package migemo
  :defer 20
  :config
  (migemo-init)
  (setq migemo-options '("-q" "--emacs"))
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)

  (when linux-p
    (setq migemo-command "cmigemo")
    (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"))

  (when windows-p
    (setq migemo-command "c:/app/cmigemo-default-win64/cmigemo.exe")
    (setq migemo-dictionary "c:/app/cmigemo-default-win64/dict/utf-8/migemo-dict")))
#+end_src

** anzu
   インタラクティブ検索, 置換

   - [[https://github.com/syohex/emacs-anzu][syohex/emacs-anzu]]
   - http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba

   #+begin_src emacs-lisp
(use-package anzu
  :defer t
  :config
  (global-anzu-mode +1)
  (set-face-attribute 'anzu-mode-line nil
		      :foreground "yellow" :weight 'bold)

  (custom-set-variables
   '(anzu-mode-lighter "")
   '(anzu-deactivate-region t)
   '(anzu-search-threshold 1000)
   '(anzu-replace-to-string-separator " => "))
  )
   #+end_src

** iedit
   グラフィカルな置換. C-;で発動.
   - https://github.com/tsdh/iedit

#+begin_src emacs-lisp
(use-package iedit
  ;; ace-jump-word-mode から keybinding をもらう.
  :bind ("C-x ;" . iedit-mode))
#+end_src

** wgrep
   grep した結果を編集.
   - [[http://kotatu.org/blog/2013/12/18/emacs-ag-wgrep-for-code-grep-search/][Emacs で moccur-grep と moccur-edit から ag と wgrep に移行したら爆速で快適すぎる - kotatu.org]]

#+begin_src emacs-lisp
(use-package wgrep-ag
  :commands wgrep-ag-setup
  :init
  (eval-after-load 'ag
      '(progn
	(add-hook 'ag-mode-hook 'wgrep-ag-setup)
	(define-key ag-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)))
  )
#+end_src

** phi-search
   multiple-cursors.el 対応のインクリメンタルサーチ.
   - [[http://rubikitch.com/2014/11/11/phi-search/][emacs phi-search.el : multiple-cursors で isearch できるよ!]]
   - https://github.com/zk-phi/phi-search

   使い方わからない.

#+begin_src emacs-lisp
;; (use-package phi-search)
;; (global-set-key (kbd "C-s") 'phi-search)
;; (global-set-key (kbd "C-r") 'phi-search-backward)

;; (with-eval-after-load 'phi-search-core
;;   (define-key phi-search-default-map [remap scroll-up-command] 'phi-search-scroll-up)
;;   (define-key phi-search-default-map [remap scroll-down-command] 'phi-search-scroll-down))
;; (set-face-attribute 'phi-search-selection-face nil
;;                     :background "orange")
#+end_src

*** phi-search-migemo
    - https://github.com/zk-phi/phi-search-migemo
    - [[http://rubiAkitch.com/2014/12/06/phi-search-migemo/][emacs phi-search-migemo.el : multiple-cursors.el 専属 isearch が Migemo 化]]

#+begin_src emacs-lisp
;; (use-package phi-search-migemo)
;; (define-key phi-search-default-map (kbd "M-m") 'phi-search-migemo-toggle)
;; (global-set-key (kbd "C-s") 'phi-search-migemo)
;; (global-set-key (kbd "C-r") 'phi-search-migemo-backward)
;; (with-eval-after-load 'multiple-cursors-core
;;   (define-key mc/keymap (kbd "C-s") 'phi-search-migemo)
;;   (define-key mc/keymap (kbd "C-r") 'phi-search-migemo-backward))
#+end_src

** isearch-dabbrev
   isearch で動的略語補完.
   - https://github.com/Dewdrops/isearch-dabbrev

   isearch 中にタブを押すと勝手に補完してくれる.

   #+begin_src emacs-lisp
(eval-after-load "isearch"
  '(progn
     (use-package isearch-dabbrev
       :init
       (define-key isearch-mode-map (kbd "<tab>") 'isearch-dabbrev-expand))))
#+end_src

** imenus
   imenu の強化.
   - https://github.com/alezost/imenus.el

   なんか, 思うように動かない.

#+begin_src emacs-lisp
(use-package imenus
  :init
  (define-key prog-mode-map (kbd "C-c h") 'imenus-mode-buffers)
  (define-key imenus-minibuffer-map (kbd "C-c h") 'imenus-exit-to-helm-multi-swoop)
  :commands (imenus imenus-mode-buffers)
  :preface
  (defun imenus-helm-multi-swoop (buffers input)
    (helm-multi-swoop (replace-regexp-in-string "^.*|" "" input)
                      (mapcar 'buffer-name buffers)))
  (defun imenus-exit-to-helm-multi-swoop ()
    "Exit from imenu prompt; start `helm-multi-swoop' with the current input."
    (interactive)
    (setq imenus-exit-status 'helm-multi-swoop))
  :config
  (push '(helm-multi-swoop . imenus-helm-multi-swoop) imenus-actions))
#+end_src

* 日本語入力
** ddskk
   Emacs 用の IME.
   - https://github.com/skk-dev/ddskk
     
*** SKK とは
   そもそも SKK とはなにかについてまとめる
   
   - [[http://openlab.ring.gr.jp/skk/doc-ja.html][SKK Openlab - ドキュメント]]
   - [[http://www.bookshelf.jp/texi/skk/skk.html][SKK Manual:]]
   - [[http://dic.nicovideo.jp/a/skk][SKK とは (エスケイケイとは)  - ニコニコ大百科]]

**** 特徴
   - SKK の最大の特徴は, 形態素解析
   - ひらがなはすべて確定の状態で打ち出される
   - エンターキーを押す必要が少なくなる
   - 変換する文字が候補一覧のバッファを出さずに出たら, 
     そのまま入力を続行すれば確定される「暗黙の確定」
   - エンターキーをできる限り迫害できる日本語入力システム.
   - 変換候補の単語に英字が一つずつ割り当てられ,
     変換したい候補の英字をタイプすることで選択され確定する

**** メリット
    - 文章を頭から流れるように書くことができる. 
      必要時に適宜漢字変換を行い, また一度に一語しか変換できないため, 
      SKK で文章を書くということは人間本来の文章の書き方に非常に良く似ている
    - 文章の書き方に非常に良く似ている
    - 変換はユーザーが全て決める = 誤変換が減る

**** デメリット

*** 設定
   設定例のかき集め.
   - [[http://mugijiru.seesaa.net/article/275755984.html][暇だったから ddskk の設定いじった: 麦汁三昧]]

   フォルダで make をしないと利用できない.

    -> なんか, windows では利用できない.
     あいうえおがしいうかと変換される.

  #+begin_src emacs-lisp
(use-package skk-autoloads
  :disabled t
  :bind (("C-x C-j" . skk-mode) ("C-x j" . skk-mode))
  :init
  (global-unset-key "\C-xj")

  ;; キーボード配置の設定
  (setq skk-use-kana-keyboard t)
  (setq skk-kanagaki-keyboard-type 'omelet-jis)

  (setq skk-egg-like-newline t) ;; Enter で改行しない
  (setq skk-byte-compile-init-file t) ;; 自動バイトコンパイル

  ;; ローマ字 prefix をみて補完する
  (setq skk-comp-use-prefix t)
  ;; 補完時にサイクルする
  (setq skk-comp-circulate t)
  ;; 個人辞書の文字コードを指定
  (setq skk-jisyo-code 'utf-8)

  ;; migemo を利用するため isearch 中は無効
  (setq skk-isearch-mode-enable nil)
  (setq skk-isearch-start-mode 'latin)
  
  (setq skk-large-jisyo "~/.emacs.d/etc/dict/SKK-JISYO.L")
#+end_src

*** 変換モード
    - [fj] で変換モード.
    - 文の途中から Q を押す.
    - C-g でぬける
    - 変換モードで [dk] でカタカナ変換.

*** 動的候補
    - [[http://d.hatena.ne.jp/tomoya/20090711/1247314350][僕の ddskk の設定です. - 日々, とんは語る. ]]
    - [[http://quruli.ivory.ne.jp/document/ddskk_14.2/skk_4.html][SKK Manual: 5. 便利な応用機能]]

#+begin_src emacs-lisp
;; 候補表示
;; (setq skk-show-candidates-always-pop-to-buffer t) ; 変換候補の表示位置
;; (setq skk-henkan-show-candidates-rows 2) ; 候補表示件数を 2 列に

;; 動的候補表示
(setq skk-dcomp-activate t)	     ; 動的補完
(setq skk-dcomp-multiple-activate t) ; 動的補完の複数候補表示 xEmacs では意味なし
(setq skk-dcomp-multiple-rows 10)    ; 動的補完の候補表示件数
#+end_src

*** 親指シフト
    われは親指シフター. 
    - [[http://futurismo.biz/archives/2881][Emacs DDSKK で NICOLA 親指シフト入力をする | Futurismo]]
    - [[https://github.com/skk-dev/ddskk/blob/master/nicola/README.NICOLA.ja][ddskk/README.NICOLA.ja at master · skk-dev/ddskk]]
    - https://github.com/skk-dev/ddskk/blob/master/nicola/README.NICOLA.ja

    - ddskk フォルダで make && make install
      - nicola フォルダで make
	windows 環境だと, cygwin で make が失敗したので, eshell で実施した.
	どうも, make install をするとダメだな.. make だけ.

    - windows だと, 変換が Google IME に取られてしまって,
      skk がうまく動作しない. 
      IME の設定が画面から Henkan をすべて無効にすればよい.

#+begin_src emacs-lisp
;; 親指シフト
(setq skk-use-kana-keyboard t)
(setq skk-kanagaki-keyboard-type 'omelet-jis)

(when windows-p
  (setq skk-nicola-lshift-keys '([non-convert]))
  (setq skk-nicola-rshift-keys '([convert])))
#+end_src

*** end of skk config

#+begin_src emacs-lisp
)
#+end_src

*** サーバ辞書設定
   - [[http://openlab.ring.gr.jp/skk/dic-ja.html][SKK Openlab - 辞書]]

   ローカルに辞書を置く場合と, サーバに問い合わせる場合がある.

   ruby: gem install google-ime-skk
   - https://github.com/hitode909/google-ime-skk
   - [[http://hitode909.hatenablog.com/entry/20110421/1303274561][Google IME SKK サーバー 作った - hitode909 の日記]]

   go:
   - [[http://sleepboy-zzz.blogspot.jp/2014/12/emacsgoogleskk_29.html#Message-complete][memo: Emacs で Google 日本語入力の SKK サーバーを利用するようにした]]
   - https://github.com/akiym/go-skkserv

#+begin_src bash
go get github.com/akiym/go-skkserv
#+end_src

   サーバの設定例.
   - [[http://www.bookshelf.jp/texi/skk/skk_3.html#SEC13][SKK Manual: はじめの設定]]
   - [[http://www.bookshelf.jp/texi/skk/skk_5.html#SEC107][SKK Manual: 便利な応用機能]]

   起動は, .profile に以下を記述している

#+begin_src bash
# skk server
google-ime-skk &
#+end_src

 Symbol's value s valiable is void: skkserv-process がでる.
     
#+begin_src emacs-lisp
(use-package skk-server
  :disabled t
  :config
  (require 'skk-vars)
  ;; 辞書サーバを利用する場合の設定
  (setq ;; skk-server-host "0.0.0.0"
        skk-server-host "localhost" ;; windows だとこっち
	skk-server-prog "google-ime-skk" ;; パスは通っているようだ.
	skk-server-portnum 1178)

  ;; 辞書サーバが使用不能になると辞書ファイルを 
  ;; Emacs のバッファに読み込んで 検索を行う.
  (setq skk-server-inhibit-startup-server nil) ;; 通信エラー時はローカル辞書を.
  (setq skk-server-jisyo "~/.emacs.d/dic/SKK-JISYO.L")

  (eval-after-load "skk"
    '(progn
       (add-to-list 'skk-search-prog-list
		    '(skk-server-completion-search) t)
       (add-to-list 'skk-search-prog-list
		    '(skk-comp-by-server-completion) t)))

  ;; 一応手動で起動する手段を用意するが, 起動は OS 側で実施する予定
  ;; (defun my/boot-skk-server ()
  ;;   "Start SKK server"
  ;;   (interactive)    
  ;;   (unless (skk-server-live-p)
  ;;     (async-shell-command skk-server-prog (get-buffer-create "*google-ime-skk*"))
  ;;     (setq skkserv-process (skk-open-server-1))
  ;;     (when (skk-server-live-p)
  ;; 	(set-process-coding-system skkserv-process 'utf-8 'utf-8))))

  ;; (defun my/skk-close-server ()
  ;;   (interactive)
  ;;   (when (skk-server-live-p)
  ;;     (skk-disconnect-server)
  ;;     (kill-process (get-buffer-process "*google-ime-skk*"))
  ;;     (message "Server disconnected")))
  ;; (add-hook 'kill-emacs-hook 'my/skk-close-server)

  ;; 辞書登録の際に送り仮名を削除
  (setq skk-check-okurigana-on-touroku 'auto)
  ;;漢字登録のミスをチェックする
  (setq skk-check-okurigana-on-touroku t))
#+end_src

*** ac-ja
    tinysegmenter に依存
    - https://github.com/myuhe/tinysegmenter.el
    - [[http://sheephead.homelinux.org/2011/10/11/6869/][auto-complete-mode で日本語を補完する ac-ja.el を作った - sheephead]]    

#+begin_src emacs-lisp
(use-package ac-ja
  :disabled t
  :config
  ;;補完候補としたい辞書ファイルの場所を指定.
  (setq ac-skk-jisyo-file "~/.emacs.d/etc/dict/SKK-JISYO.L")
  ;;補完候補生成に必要な中間ファイルを置く場所を指定.
  (setq ac-skk-alist-file "~/.emacs.d/ac-skk-alist.el")

  (setq ac-sources (append ac-sources '(ac-source-jisyo-ja)))
  (setq ac-sources (append ac-sources '(ac-source-dabbrev-ja)))
  
  ;; skk-kakutei の後に atuo-complete-mode による補完を実行する advice
  (defadvice skk-kakutei (after ad-skk-kakutei last)
    (unless (minibufferp)
      (ac-start))
 
  ;; skk-kakutei の advice を活性化
  (add-hook 'skk-mode-hook 
	    (lambda () 
	      (interactive)
	      (ad-activate 'skk-kakutei)))
  ;; skk-mode から抜ける時に skk-kakutei の advice を不活性化.
  (defadvice skk-mode-exit (before ad-skk-mode-exit last)
    (ad-deactivate 'skk-kakutei))
  ))
#+end_src

*** ac-skk
    auto-complete-mode source for DDSKK a.k.a Japanese input method
    - https://github.com/myuhe/ac-skk.el

    *廃止*  
    - org-mode と auto-complete の間には不具合あり 
    - 使い方がよくわからない.

#+begin_src emacs-lisp
(use-package ac-skk
  :disabled t
  :config
  (ac-skk-enable))
#+end_src

*** TODO workaround

#+begin_src emacs-lisp
;; (require 'skk-vars) ;; これをかかないと Emacs 終了時に終了できない??
#+end_src

** ibus-mode
   ibus を使う.
   - [[http://www11.atwiki.jp/s-irie/pages/21.html#][irie @ ウィキ - ibus.el]]

   ibus 1.5 では動作しない. だれか直してくれないかな.

#+begin_src emacs-lisp
(use-package ibus
  :disabled t
  :init
  (add-hook 'after-init-hook 'ibus-mode-on)
  (global-set-key [zenkaku-hankaku] 'ibus-toggle)
  :config
  (setq ibus-agent-file-name "~/.emacs.d/el-get/repo/ibus/ibus-el-agent")
  (setq ibus-python-shell-command-name "python2")
  
  ;; バッファ共用
  (setq ibus-mode-local nil)
  
  ;; C-SPC は Set Mark に使う
  (ibus-define-common-key ?\C-\s nil)
  ;; C-/ は Undo に使う
  (ibus-define-common-key ?\C-/ nil)
  ;; IBus の状態によってカーソル色を変化させる
  (setq ibus-cursor-color '("red" "blue" "green"))
  ;; C-j で半角英数モードをトグルする
  (ibus-define-common-key ?\C-j t)

  ;; for oyayubi
  (setq ibus-use-kana-onbiki-key t)
  (setq ibus-simultaneous-pressing-time 0.1))
#+end_src

** context-sk
   プログラムファイルのコード部分で「かな」とかになってた場合に
   自動的に英字入力モードに戻してくれる.
   - [[http://mugijiru.seesaa.net/article/201540864.html][ddskk で, コード中では自動的に日本語入力をオフにする: 麦汁三昧]]

#+begin_src emacs-lisp
(add-hook 'skk-load-hook
	  (lambda ()
	    (use-package context-skk)))
#+end_src

** text-adjust
   - text-adjust-codecheck : 半角カナ, 規格外文字を「〓」に置き換える.
   - text-adjust-hankaku   : 全角英数文字を半角にする.
   - text-adjust-kutouten  : 句読点を「, 」「. 」に置き換える.
   - text-adjust-space     : 全角文字と半角文字の間に空白を入れる.

   これは便利だ.
   書込みテスト

   - [[http://www.emacswiki.org/emacs/InsertSpaceBetweenZenkakuAndHankaku][EmacsWiki: Insert Space Between Zenkaku And Hankaku]]
   - [[http://d.hatena.ne.jp/rubikitch/20090220/text_adjust][全角文字と半角文字の間に自動でスペースを開ける text-adjust.el を使ってみた ]]
   - http://www.rubyist.net/~rubikitch/archive/mell.el
   - http://www.rubyist.net/~rubikitch/archive/text-adjust.el

#+begin_src emacs-lisp
(use-package text-adjust
  :init
  (add-hook 'before-save-hook 'text-adjust-space-before-save-if-needed)
   (defun text-adjust-space-before-save-if-needed ()
     (when (memq major-mode
		 '(org-mode text-mode wl-draft-mode))
       (text-adjust-buffer)))
   ;;           (text-adjust-space-buffer)))
   (defalias 'spacer 'text-adjust-space-buffer))
#+end_src

** yspel
   Yahoo の文章校正ツールを利用した日本語スペルチェック!
   - [[http://ubulog.blogspot.jp/2010/09/emacs.html][ubulog: Emacs から校正支援する]]

   #+begin_src emacs-lisp
   ;; (use-package yspel :defer t)
   #+end_src

** langtool
   Language tool 共通オープンソースの スペルチェッカー
   - [[https://www.languagetool.org/][LanguageTool Style and Grammar Check]]
   - https://github.com/mhayashi1120/Emacs-langtool
   - [[http://d.hatena.ne.jp/mhayashi1120/20110205/1296872930#][LanguageTool - まにっき]]

   language tool 自体は別にインストール.
   - archlinux: sudo pacman -S languagetool

   使えなかった...なにも検出できないし, そもそも java がうごかない.

#+begin_src emacs-lisp
(when linux-p
  (use-package langtool
  :disabled t
  :config
  (setq langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar")

  (setq langtool-mother-tongue "ja")
  (setq langtool-java-bin "/usr/bin/java")
  
  (global-set-key "\C-x4w" 'langtool-check)
  (global-set-key "\C-x4W" 'langtool-check-done)
  (global-set-key "\C-x4l" 'langtool-switch-default-language)
  (global-set-key "\C-x44" 'langtool-show-message-at-point)
  (global-set-key "\C-x4c" 'langtool-correct-buffer)
  ))
#+end_src

* 英語入力
** aspell
   昔は ispell, 今は aspell が主流らしい.

   #+begin_src sh
   sudo pacman -S aspell aspell-en.
   #+end_src

   デフォルトだと日本語辞書を探そうとするため,
   以下のおまじないをし, 英語の辞書を検索するようにする.

   #+begin_src sh
   echo "lang en_US" >> ~/.aspell.conf
   #+end_src

 #+begin_src emacs-lisp
(use-package ispell
  :config
  ;; aspell にパスを通す
  (when (file-executable-p "/usr/bin/aspell")
    (setq-default ispell-program-name "aspell")
    ;; (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
    ;; パフォーマンス向上
    (add-to-list 'ispell-extra-args "--sug-mode=ultra")
    ;; 日本語はスキップ.
    '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))))
#+end_src

   - バッファ全体をスペルチェック M-x ispell-buffer
   - 選択範囲だけスペルチェック M-x ispell-region

*** 辞書に単語を登録する
    - [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki: Fly Spell]]
      + region 選択して,ispell-region/word で選択.
      + "i"を入力
      + $HOME/.aspell.en.pws に登録される.

** flyspell
   リアルタイム, スペルチェック.
   - [[http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/flyspell_config.html][Youhei SASAKI's official site: flyspell-mode の設定]]
   - [[http://d.hatena.ne.jp/mooz/20100423/p1][flyspell-mode の修正候補表示を popup.el で - mooz deceives you]]

   #+begin_src emacs-lisp
(use-package flyspell
  :if linux-p
  :bind (("C-c <f8>" . flyspell-mode)
	 ("C-c <f9>" . ispell-word)
	 ("C-c <f10>" . flyspell-buffer))
  :init
  ;; 特定のモードで有効.
  (mapc
   (lambda (hook)
     (add-hook hook 'flyspell-mode))
   '(text-mode-hook
     org-mode-hook
     wl-draft-mode-hook
     twittering-edit-mode))
  
  ;; コメント領域のところだけ有効.
  ;; iedit を阻害するので封印
  ;;  (mapc
  ;;   (lambda (hook)
  ;;     (add-hook hook 'flyspell-prog-mode))
  ;;   '(c-mode-common-hook
  ;;     ruby-mode-hook
  ;;     java-mode-hook    
  ;;     emacs-lisp-mode-hook))
  :config
  ;; C-; は iedit にわたすので, 無効にしておく.
  ;; (setq flyspell-auto-correct-binding nil)
  ;; どうも flyspell と ac-complete は相性が悪い?
  ;; (ac-flyspell-workaround)
  )
#+end_src

** flyspell-lazy
   flyspell を lazy に改良.
   - https://github.com/rolandwalker/flyspell-lazy

#+begin_src emacs-lisp
(use-package flyspell-lazy
  ;; エラーしている.
  :disabled t 
  :config
  (flyspell-lazy-mode 1))
#+end_src

** grammar
   英語の文法をチェックしてくれる.
   - [[http://www.emacswiki.org/emacs/BaoqiuCui][EmacsWiki: Baoqiu Cui]]

*** インストール
   - link-grammar をインストール.
   - /usr/include/link-grammar/ にファイルが配置される.
   - svn co http://bcui-emacs.googlecode.com/svn/trunk/grammar
   - INCDIRS = -I. -I/usr/include/link-grammar に Makefile を修正.

   C-M-g で文法チェック発動.
   
*** 設定
  コンパイルができなくなった... 封印.

#+begin_src emacs-lisp
  ; (use-package grammar
  ;   :if linux-p
  ;   :config
  ;   (setq grammar-program-name "~/.emacs.d/elisp/grammar/grammar")
  ;   ;; 黒背景用の色変更
  ;   (set-face-attribute 'grammar-error-face nil
  ; 			:background "#Ff6347"
  ; 			:foreground "#000000")
    
    ;; TODO Refactoring
    ;; (add-hook 'org-mode-hook 'grammar-mode)
    ;; (add-hook 'text-mode-hook 'grammar-mode)
    ; (add-hook 'twittering-edit-mode-hook 'grammar-mode)
    ; )
#+end_src

** auto-capitalize
   自動で大文字に変換する.
   - https://github.com/yuutayamada/auto-capitalize-el
   - [[http://sleepboy-zzz.blogspot.jp/2013/09/auto-capitalizeel-aspell.html][memo: 英語環境で文字を大文字にキャピタライズする拡張 auto-capitalize.el を導入した]]

   You can use by M-x
   - turn-on-auto-capitalize-mode
   - auto-capitalize-mode.

   つかってないな. . 封印.

   #+begin_src emacs-lisp
;; This code is from README
(use-package auto-capitalize
  :disabled t
  :defer t
  :init
  (add-hook 'twittering-edit-mode-hook
	    '(lambda ()
	       (turn-on-auto-capitalize-mode)))
  :config
;; (defvar programing-hooks
;;   ;; Add your preference programming mode hook like ruby-mode-hook
;;   '(twittering-edit-mode-hook
;;     ;; org-mode-hook
;;     ))

;; (defvar my/programming-mode nil
;;   "Use this variable to know whether current major-mode is mode
;;   for programming. If it is non-nil mean the mode is mode for programming."
;;   )

;; ;; Add hook to set t (rue) to my/programming-mode as a buffer local valuable
;; ;; to prevent a turn on auto-capitalize-mode.
;; (loop for hook in programing-hooks
;;       do (add-hook hook
;;                    '(lambda ()
;;                       (setq-local my/programming-mode t))))

;; (defun my/switch-auto-capitalize-mode ()
;;   "turn on auto-capitalize-mode if it was comment line on
;;   specific programming mode."
;;   (if my/programming-mode
;;       (if (equal font-lock-comment-face
;;                  (nth 1 (text-properties-at (point))))
;;           (turn-on-auto-capitalize-mode)
;;         (turn-off-auto-capitalize-mode))))

;; couldn't work
;; (defadvice self-insert-command
;;     "turn on auto-capitalize-mode on specified programming mode"
;;   (around ad-turn-on-auto-capitalize activate)
;;   (unless (minibufferp)
;;     (my/switch-auto-capitalize-mode))
;;   ad-do-it)

;; Enable auto-capitalize-mode
;; (add-hook 'text-mode-hook
;;           '(lambda ()
;;              (turn-on-auto-capitalize-mode)))
)
   #+end_src
* Others
** 文字数カウント
   - count-words
   - count-words-region

** ライバルの秀丸.
   - [[http://www.maruo.co.jp/_library/info.asp?sno=hls0000&i=0][秀丸エディタマクロライブラリ:ダウンロード情報]]
