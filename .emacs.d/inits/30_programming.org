* Programming
  いろいろなプログラミング言語に関わる設定.

** Emacs as IDE 
   優れた IDE が備えるべき機能は以下
   - シンタックスハイライト
     - major-jode
   - 検索・置換
   - タグジャンプ
   - コード補間
     - auto-complete
   - エラーチェック
     - flymake
     - flycheck
   - リファクタリング
   - インタープリタ・デバッカ

** prog-mode
   programming のためのメジャーモード.
   - [[http://www.emacswiki.org/emacs/ProgMode][EmacsWiki: Prog Mode]]
  
* 編集 (とくにプログラミング)
** electric-spacing
   演算子の前後にスペースを挿入. 
   かつては smart-operator といわれた.
   - https://github.com/xwl/electric-spacing

#+begin_src emacs-lisp
(use-package electric-spacing
  :init
  (add-hook 'prog-mode-hook #'electric-spacing-mode))
#+end_src

** インデントで垂直方向に揃える
   M-x align-regexp
   - [[http://postd.cc/why-i-vertically-align-my-code-and-you-should-too/][【翻訳】私がコーディングで垂直方向にそろえるインデントをとる理由 | POSTD]]

   これ便利.
   - [[http://stackoverflow.com/questions/3633120/emacs-hotkey-to-align-equal-signs][Emacs hotkey to align equal signs - Stack Overflow]]

#+begin_src emacs-lisp
(defun align-to-equals (begin end)
  "Align region to equal signs"
   (interactive "r")
   (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))
(global-set-key (kbd "C-x a =") 'align-to-equals)
#+end_src

** aggressive-indent-mode
   賢い indent-mode
   - https://github.com/Malabarba/aggressive-indent-mode

   *names* に依存しているので, 
   require 'names してからインストールしないとおかしくなる.

#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode))
#+end_src
   
* コンパイル
** smart-compile
   コマンドからコンパイル実行. 独自改造したものが, elisp にある.
   - http://www.emacswiki.org/emacs/download/smart-compile.el

   quickrun に乗り換えてみるため,いったんコメントアウト.

#+begin_src emacs-lisp
;; (use-package smart-compile)
;; (setq compilation-window-height 15)

;; (define-key ruby-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key java-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key python-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key 'c-mode-map (kbd "C-c r") 'smart-compile)
#+end_src

** quickrun
  コンパイルを実行. smart-compile よりいい??
  - https://github.com/syohex/emacs-quickrun

  C-u C-u quickrun で quickrun-compile-only
  -> 内部で M-x compile をりようしているため,
  エラー箇所にジャンプすることができる.

#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  :config
  (push '("*quickrun*") popwin:special-display-config)
  (setq quickrun-timeout-seconds 20))
#+end_src

** rake
   Interaction with rake command tool.
   - https://github.com/asok/rake

#+begin_src emacs-lisp
(use-package rake
  :config
  (eval-after-load 'ruby-mode
    '(define-key ruby-mode-map (kbd "C-!") 'rake))
  (setq rake-completion-system 'helm))
#+end_src

** helm-make
   - https://github.com/abo-abo/helm-make

   #+begin_src emacs-lisp
   (use-package helm-make)
   #+end_src

* プロジェクト管理
** projectile
   Project Interaction Library for Emacs.
   - https://github.com/bbatsov/projectile
   
   自動でプロジェクトのルートディレクトリを探して, 
   それ以下のファイルを見つけたり色々できる.
   - [[http://blog.en30.net/2014/10/20/development-environment.html][最近の開発環境: mjolnir, projectile, peco - blog.en30.net]]

   .projectile ファイルをマニュアルで作成することで,
   そのフォルダを Route Folder と認識出来る.(要 Emacs 再起動)

   以下で GTAGS を作成.
   - projectile-regenerate-tags

   Prefix key of Projectile is C-c p. Some notable features: 
   - Jump to any file in the project: C-c p f. 
   - Jump to any directory in the project: C-c p d. 
   - List buffers local to current project: C-c p b. 
   - Jump to recently visited files in project: C-c p e. 
   - Grep in project: C-c p g s 
   - Multi-occur in project buffers: C-c p o. 
   - Simple refactoring with text replace in current project: C-c p r. 
   - Switch visited projects (visited once an Projectile remembers): C-c p p. 

   Useful commands for working with C/C++ projects: 
   - Run compilation command at project root: C-c p c. By default, Projectile prompts the make command. 
   - Switch between .h and .c or .cpp: C-c p a. (便利!!)

   #+begin_src emacs-lisp
(use-package projectile
  :defer 20
  :config
  (projectile-global-mode)
  ;; windows indexing 高速化のおまじない.
  (when windows-p
    (setq projectile-indexing-method 'alien))

  ;; 大きいプロジェクトだと劇的に改善するらしい.
  (setq projectile-enable-caching t)
  
  ;; gtags があればそっちを
  ;; ggtags が必要.
  (when (executable-find "gtags")
    (setq projectile-tags-file-name "GTAGS")
    (setq projectile-tags-command "gtags")))
   #+end_src

* タグジャンプ
** GNU global: gtags
   ソースタギングシステム.
    - [[http://www.gnu.org/software/global/global.html][GNU GLOBAL source code tagging system]]
    - C, C++, Yacc, Java, PHP4 and assembly

    Pygments を利用すると, もっと多言語に適用できる.
    - [[https://github.com/yoshizow/global-pygments-plugin][yoshizow/global-pygments-plugin]]
    - Awk, Dos batch, COBOL, C, C++, C#, Erlang, Fortran, 
    - Java, JavaScript, Lisp, Lua, Pascal, Perl, PHP, Python, 
    - Ruby, Matlab, OCaml, Scheme, Tcl, TeX, Verilog, Vhdl and Vim

   以下からダウンロード. Windows ようのバイナリあり.
   - [[http://www.gnu.org/software/global/download.html][Getting GLOBAL]]

*** Bookmarks
    - [[http://uguisu.skr.jp/Windows/gtags.html][GNU GLOBAL (gtags) ソースコードタグシステムの使い方]]
    - [[http://qiita.com/5t111111/items/c14ac68f762ce71a7760][Ruby - GNU GLOBAL への Pygments パーサー取り込みでソースコード読みが信じられないくらいに捗るはず - Qiita]]

*** Emacs と
   - [[http://namamugi2011.blog.fc2.com/blog-entry-42.html][GNU GLOBAL と emacs でコードリーディング | ぷろぐらま]]

#+begin_src emacs-lisp
;; (use-package gtags)
;; :bind
;; (("\M-t" . gtags-find-tag) ;関数の定義元へ
;;  ("\M-r" . gtags-find-rtag) ;関数の参照先へ
;;  ("\M-s" . gtags-find-symbol) ;変数の定義元/ 参照先へ
;;  ;; ("\M-f" . gtags-find-file) ;ファイルにジャンプ
;;  ("\M-," . gtags-pop-stack));前のバッ ファに戻る
;; )
;; :init	
;; (add-hook 'c-mode-common-hook
;;           '(lambda ()
;;              (gtags-mode 1)
;;              (gtags-make-complete-list))))
#+end_src

** ggtags
   GNU Global 

   projectile で必要.
   - https://github.com/leoliu/ggtags

#+begin_src emacs-lisp
(use-package ggtags
  :init
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))
  :config
  ;; use helm
  (setq ggtags-completing-read-function nil)

  ;; use eldoc
  (setq-local eldoc-documentation-function #'ggtags-eldoc-function)

  ;; imenu
  (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
  
  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark))
#+end_src

** semantic mode

#+begin_src emacs-lisp
(semantic-mode 1)
#+end_src

* エラーチェック
** flymake
   静的文法チェック.

   -> flycheck にだんだん移行する.

#+begin_src emacs-lisp
(use-package flymake
  :disabled t
;;  :bind (("M-p"  . flymake-goto-prev-error)
;;	 ("M-n"  . flymake-goto-next-error)
;;	 ("C-c d" . flymake-display-err-menu-for-current-line))
  :init
  (add-hook 'find-file-hook 'flymake-find-file-hook)
;;  (add-hook 'c++-mode-hook '(lambda () (flymake-mode t)))
;;  (add-hook 'c-mode-hook '(lambda () (flymake-mode t)))
  (add-hook 'haskell-mode-hook (lambda () (flymake-mode t)))
;; (add-hook 'java-mode-hook '(lambda () (flymake-mode t)))
  (add-hook 'emacs-lisp-mode-hook
	    (function (lambda () (if buffer-file-name (flymake-mode t)))))
  :config
  ;; GUI の警告は表示しない
  (setq flymake-gui-warnings-enabled nil)
#+end_src

*** Java
    Java は flycheck 対応していない...
#+begin_src emacs-lisp
(defun my-java-flymake-init ()
  (list "javac" (list (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-with-folder-structure))))
(add-to-list 'flymake-allowed-file-name-masks '("\\.java$" my-java-flymake-init flymake-simple-cleanup))

(defun flymake-java-init ()
  (list "my-java-flymake-checks"
	(list (flymake-init-create-temp-buffer-copy
	       'flymake-create-temp-with-folder-structure))))

(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.java$" flymake-java-init flymake-simple-cleanup))
#+end_src

*** C/C++ 
    flycheck を利用するので封印
#+begin_src emacs-lisp
;; (defun flymake-cc-init ()
;;   (let* ((temp-file   (flymake-init-create-temp-buffer-copy
;; 		       'flymake-create-temp-inplace))
;; 	 (local-file  (file-relative-name
;; 		       temp-file
;; 		       (file-name-directory buffer-file-name))))
;;     (list "g++" (list "-Wall" "-Wextra" "-fsyntax-only" local-file))))

;; (push '("\\.c$" flymake-cc-init) flymake-allowed-file-name-masks)
;; (push '("\\.cpp$" flymake-cc-init) flymake-allowed-file-name-masks)
#+end_src

*** Haskell
*** Python

#+begin_src emacs-lisp
(defun flymake-pyflakes-init ()
  (when (not (subsetp (list (current-buffer)) (tramp-list-remote-buffers)))
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
		       'flymake-create-temp-inplace))
	   (local-file (file-relative-name
			temp-file
			(file-name-directory buffer-file-name))))
      (list "pyflakes" (list local-file)))))

(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.py$" flymake-pyflakes-init))
#+end_src

*** Emacs lisp
    - [[http://www.lunaport.net/blog/2010/02/windowsflymake-elisp-1.html][Windows でも手軽に flymake elisp (修正版) - るなぽブログ]]

#+begin_src emacs-lisp
(defun flymake-elisp-init ()
  (unless (string-match "^ " (buffer-name))
    (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
           (local-file  (file-relative-name
                         temp-file
                         (file-name-directory buffer-file-name))))
      (list
       (expand-file-name invocation-name invocation-directory)
       (list
        "-Q" "--batch" "--eval"
        (prin1-to-string
         (quote
          (dolist (file command-line-args-left)
            (with-temp-buffer
              (insert-file-contents file)
              (emacs-lisp-mode)
              (let ((parse-sexp-ignore-comments t))
                (condition-case data
                    (scan-sexps (point-min) (point-max))
                  (scan-error
                   (goto-char (nth 2 data))
                   (princ (format "%s:%s: error: Unmatched bracket or quote\n"
                                  file (line-number-at-pos))))))))
          )
         )
        local-file)))))

(push '("\\.el$" flymake-elisp-init) flymake-allowed-file-name-masks)
#+end_src

*** End of flymake
#+begin_src emacs-lisp
)
#+end_src

** flycheck
   静的文法チェック. flymake の後継. flymake から乗り換えよう.
   - [[https://github.com/flycheck/flycheck][flycheck/flycheck]]
   - [[http://www.flycheck.org/en/latest/][Flycheck - Modern Emacs syntax checking ]]

   Default のサポート言語
   - [[http://www.flycheck.org/en/latest/guide/languages.html][Supported languages - Flycheck 0.23-cvs]]

*** Usage
    基本の使い方
    - C-c ! c (flycheck-buffer) 現在のバッファを検査
    - C-c ! C (flycheck-clear)  
    - C-c ! n (flycheck-next-error)
    - C-c ! p (flycheck-previous-error)
    - C-c ! l (flycheck-list-errors) 

    以下で checker を切り替える
    - C-c ! s

*** Configuration
    - [[http://qiita.com/senda-akiha/items/cddb02cfdbc0c8c7bc2b][Emacs - Flycheck でモダンなシンタックスチェック - Qiita]]
    
#+begin_src emacs-lisp
(use-package flycheck
  ;; :init
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  :config
  (setq flycheck-highlighting-mode 'lines))
#+end_src

*** extensions
**** flycheck-pos-tip
     ポップアップで注意事項を表示する. 

**** flycheck-color-mode-line
     エラーがあればモードラインが光る. flycheck のサブモジュール.
     - https://github.com/flycheck/flycheck-color-mode-line

     光らないが, powerline のせいか?
     
  #+begin_src emacs-lisp
(use-package flycheck-color-mode-line
  :init
  (eval-after-load "flycheck"
    '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))
  #+end_src

* リファクタリング
** emacs-refactor
   - https://github.com/chrisbarrett/emacs-refactor

#+begin_src emacs-lisp
(use-package emr
  :init
  (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
  (add-hook 'prog-mode-hook 'emr-initialize))
#+end_src

* Utils
** ediff
   emacs よう diff ツール
   - http://www.emacswiki.org/emacs/EdiffMode

   #+begin_src emacs-lisp
(use-package ediff
  :defer t
  :config
  ;; コントロール用のバッファを同一フレーム内に表示
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; 縦に分割
  (setq ediff-split-window-function 'split-window-horizontally)
  ;; ウィンドウサイズによっては横分割
  (setq ediff-split-window-function (if (> (frame-width) 150)
					'split-window-horizontally
				      'split-window-vertically))
  )
#+end_src

** tdd
   Test-Driven Development 用の Elisp??
   なんか, エラーしてもグリーンな気がする.

#+begin_src emacs-lisp
(use-package tdd :disabled t)
#+end_src

** origami
   A folding minor mode for Emacs 
   - https://github.com/gregsexton/origami.el
   - [[http://rubikitch.com/2015/01/03/origami/][elisp,Clojure,C 系言語で org-mode 風の折畳みをする| るびきち「日刊 Emacs 」]]

#+begin_src emacs-lisp
(use-package origami
  :init
  (add-hook 'view-mode-hook 'view-mode-hook--origami)
  ;; お試しで, C 言語で有効にしてみよう
  ;; (add-hook 'c-mode-common-hook 'origami-mode)
  :commands view-mode-hook--origami
  :config
  (define-minor-mode origami-view-mode
    "TAB に origami の折畳みを割り当てる"
    nil "折紙"
    '(("\C-i" . origami-cycle))
    (or origami-mode (origami-mode 1)))
  (defun origami-cycle (recursive)
    "origami の機能を org 風にまとめる"
    (interactive "P")
    (call-interactively
     (if recursive 'origami-toggle-all-nodes 'origami-toggle-node)))
  (defun view-mode-hook--origami ()
    (when (memq major-mode (mapcar 'car origami-parser-alist))
      (origami-view-mode (if view-mode 1 -1))))

  ;; indent と競合するなぁ. org-mode のようになってほしい.
  ;; (define-key origami-mode-map (kbd "C-i") 'origami-forward-toggle-node)
  (define-key origami-mode-map (kbd "TAB") 'origami-forward-toggle-node)
  (define-key origami-mode-map (kbd "<backtab>") 'origami-toggle-all-nodes))
#+end_src

** smart-newline
   空気を読んでくれる newline
   - [[http://ainame.hateblo.jp/entry/2013/12/08/162032][smart-newline.el という拡張 #emacs - ainame の日記]]
   - https://github.com/ainame/smart-newline.el

   #+begin_src emacs-lisp
   (use-package smart-newline
     :init
     (define-key global-map (kbd "C-j") 'smart-newline))
   #+end_src

* git
** magit
   Emacs の Git Client.
   - https://github.com/magit/magit
   - http://qiita.com/takc923/items/c7a11ff30caedc4c5ba7

   チートシート
   - http://daemianmack.com/magit-cheatsheet.html

   #+begin_src emacs-lisp
(use-package magit
  :bind ("C-c m" . magit-status)
  :commands (magit magit-svn)
  :config
  (setq magit-git-executable "git")
  (setq magit-emacsclient-executable "emacsclient")
#+end_src

*** magit-log で時刻表示
    - [[http://rubikitch.com/2015/01/30/magit-time-format/][magit のログで, コミット日時を時刻で表示させる設定 | るびきち]]

#+begin_src emacs-lisp
(defvar magit-log-time-format "%y-%m-%d %H:%M")
(defun magit-format-duration--format-date (duration spec width)
  (format-time-string magit-log-time-format
                      (seconds-to-time (- (float-time) duration))))
(advice-add 'magit-format-duration :override
            'magit-format-duration--format-date)
(defun magit-log-margin-set-timeunit-width--fixed ()
  (setq magit-log-margin-timeunit-width 12))
(advice-add 'magit-log-margin-set-timeunit-width :override
            'magit-log-margin-set-timeunit-width--fixed)
(setq magit-log-margin-spec '(33 nil magit-duration-spec))
#+end_src

*** end of config
    #+begin_src emacs-lisp
    )
    #+end_src

** gist
  Emacs gist interface
  - https://github.com/defunkt/gist.el

#+begin_src emacs-lisp
(use-package gist)
#+end_src

  helm-gist というのもあるけど, 使い方わからない.
  - https://github.com/emacs-helm/helm-gist/blob/master/helm-gist.el

** git-gutter
   前回分との差分が見えるツール
   - https://github.com/syohex/emacs-git-gutter

   いつも有効にすると遅いので, 必要なときに手動で有効に.(org-mode で遅い)

#+begin_src emacs-lisp
(use-package git-gutter)
  ;; (global-git-gutter-mode +1)
  ;; (git-gutter:linum-setup))
#+end_src
     
** github 関連
 #+begin_src emacs-lisp
;; git 管理のシンボリックリンクで質問されないためのおまじない.
;; 参考: http://openlab.dino.co.jp/2008/10/30/212934368.html
;;; avoid "Symbolic link to Git-controlled source file;; follow link? (yes or no)
(setq git-follow-symlinks t)
 #+end_src
* svn
** vc-mode
   Emacs にはじめから入っている.
   - [[http://dev.ariel-networks.com/articles/emacs/part7/][「 VC (バージョンコントロール) パッケージの基礎」 (菅原泰樹) - ありえるえりあ]]

   | key     | command                  | 説明                   | svn command |
   |---------+--------------------------+------------------------+-------------|
   | C-x v = | vc-diff                  | 差分を表示             | diff        |
   | C-x v l | vc-print-log             | 履歴を表示             | log         |
   | C-x v g | vc-annotate              | 注釈を表示             | blame       |
   | C-x v ~ | vc-revision-other-window | 過去のバージョンを表示 | cat         |
   | C-x v + | vc-update                | 更新                   | update      |
   | C-x v v | vc-next-action           | コミット               | commit      |
   | C-x v i | vc-register              | ファイルの追加         | add         |
   | C-x v u | vc-revert                | 修正の破棄             | revert      |
   | C-x v d | vc-dir                   | 状態の表示             | status      |
   |         | ediff-revision           | Ediff で差分を表示     |             |

   vc-annotate がすごくいい.
   - [[http://d.hatena.ne.jp/naoya/20080404/1207294998][Emacs の vc-annotate - naoya のはてなダイアリー]]
   - [[http://blog.kyanny.me/entry/2014/08/16/022311][vc-git の vc-annotate をコンパクトな見た目にする - @kyanny's blog]] 

#+begin_src emacs-lisp
(defadvice vc-git-annotate-command (around vc-git-annotate-command activate)
  "suppress relative path of file from git blame output"
  (let ((name (file-relative-name file)))
    (vc-git-command buf 'async nil "blame" "--date=iso" rev "--" name)))
#+end_src

** speedup
  - [[http://stackoverflow.com/questions/8837712/emacs-creates-buffers-very-slowly][windows - Emacs creates buffers very slowly - Stack Overflow]]

#+begin_src emacs-lisp
(remove-hook 'find-file-hooks 'vc-find-file-hook)
#+end_src

*** vc git が遅くなる??
  - [[http://emacs.1067599.n5.nabble.com/slow-opening-of-files-in-git-directories-in-windows-td187276.html][Emacs - Dev - slow opening of files in git directories in windows]]

#+begin_src emacs-lisp
(setq vc-handled-backends nil)
#+end_src


* Bookmarks
  自分のメジャーモードをつくろう.
  - [[http://www.wilfred.me.uk/blog/2015/03/19/adding-a-new-language-to-emacs/][Adding A New Language to Emacs | Wilfred Hughes :: Blog]]
