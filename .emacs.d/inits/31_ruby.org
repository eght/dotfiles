* Ruby
  みんな大好き Ruby だお.
  - [[http://futurismo.biz/archives/2213][Emacs で Ruby の開発環境をさらにめちゃガチャパワーアップしたまとめ | Futurismo]]

** パスの設定
#+begin_src emacs-lisp
;; Setting rbenv path
;; emacs から rbenv でいれた Ruby を利用する.
;;(setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:"
;;		       (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
;;(setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims")
;;		(cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))
#+end_src

* 入力支援
** ruby-mode

#+begin_src emacs-lisp
(use-package ruby-mode
  :commands ruby-mode
  :mode   (("\\.rb$" . ruby-mode)
	   ("Capfile$" . ruby-mode)
	   ("Gemfile$" . ruby-mode)
	   ("[Rr]akefile$" . ruby-mode))
  :interpreter "ruby")
#+end_src

** enhanced-ruby-mode
   Better Ruby Mode.
   - https://github.com/zenspider/enhanced-ruby-mode

#+begin_src emacs-lisp
; must be added after any path containing old ruby-mode
;;(use-package enh-ruby-mode)
;;(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))

;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Capfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("[Rr]akefile$" . enh-ruby-mode))
;;(add-to-list 'load-path "~/.emacs.d/elips/el-get/enh-ruby-mode")
;;(add-to-list 'interpreter-mode-alist '("ruby" enh-ruby-mode))

;;(remove-hook 'enh-ruby-mode-hook 'erm-define-faces)
#+end_src

** robe-mode
   かしこい補完.

#+begin_src emacs-lisp
(use-package robe-mode
  :init
  (add-hook 'ruby-mode-hook 'robe-mode)
  (add-hook 'robe-mode-hook 'ac-robe-setup)
  :config
  (setq robe-highlight-capf-candidates nil))
#+end_src

** ruby-electric.el
  electric editing commands for ruby files

  かっこや do end などの対応関係を自動で補正してくれる

#+begin_src emacs-lisp
(use-package  ruby-electric
  :defer t
  :init
  (add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
  :config
  (setq ruby-electric-expand-delimiters-list nil)
)
#+end_src

** ruby-block
  かっこや do end などの対応関係を自動でハイライトしてくれる

#+begin_src emacs-lisp
(use-package ruby-block
  :defer t
  :init
  (add-hook 'ruby-mode-hook '(lambda () (ruby-block-mode t)))
  :config
  (setq ruby-block-highlight-toggle t)
)
#+end_src

** ruby-refactor
  Ruby 用リファクタリングツール
  - https://github.com/ajvargo/ruby-refactor.git

#+begin_src emacs-lisp
(use-package ruby-refactor
  :defer t
  :init
  (add-hook 'ruby-mode-hook '(lambda () (ruby-refactor-mode-launch)))
)
#+end_src

* デバッグ
** ruby-debug
   標準ライブラリのデバッカ. ステップ実行できる.
   elisp は ruby のソースに梱包されている.
  
#+begin_src emacs-lisp
(use-package rubydb :commands rubydb)
#+end_src

** inf-ruby
  emacs から irb を操作

  #+begin_src emacs-lisp
(use-package inf-ruby
  :commands inf-ruby
  :init
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  )
#+end_src

** pry
   高機能 irb
   - git@github.com:jacott/emacs-pry.git
     
#+begin_src emacs-lisp
;; (use-package pry)
;; optional suggestions
;;(global-set-key [S-f9] 'pry-intercept)
;;(global-set-key [f9] 'pry-intercept-rerun)
#+end_src

** autotest
   rspec 自動実行.

#+begin_src emacs-lisp
;; 動かん!
;; (use-package autotest)
#+end_src

** rspec-mode
   rspec 拡張

#+begin_src emacs-lisp
(use-package rspec-mode
  :defer 20
  :commands rspec-mode
  :config
  (add-hook 'ruby-mode-hook 'rspec-mode)
  ;; (rspec-install-snippets)
  :config
  (custom-set-variables '(rspec-use-rake-flag nil))
  (custom-set-faces))
#+end_src

** minitest 
  A minitest mode for emacs 
   - https://github.com/arthurnn/minitest-emacs

  rake とか bundle とか、本格的にプロジェクト管理していないと
  利用できない. quickrun のほうが良さげ.

#+begin_src emacs-lisp
(use-package minitest
  :init
  (add-hook 'ruby-mode-hook 'minitest-mode))
;;  :config
;;  (minitest-install-snippets))
#+end_src

* 静的解析
** flycheck
   -> programming に移動.

** robocop 
   checkstyle のようなスタイルの解析
   gem install rubocop
   
#+begin_src emacs-lisp
;;(use-package rubocop)
;;(add-hook 'ruby-mode 'rubocop-mode)
#+end_src

