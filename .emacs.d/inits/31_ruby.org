* Ruby
  みんな大好き Ruby だお.
  - [[http://futurismo.biz/archives/2213][Emacs で Ruby の開発環境をさらにめちゃガチャパワーアップしたまとめ | Futurismo]]

* 入力支援
** ruby-mode

#+begin_src emacs-lisp
(use-package ruby-mode
  :commands ruby-mode
  :mode   (("\\.rb$" . ruby-mode)
	   ("Capfile$" . ruby-mode)
	   ("Gemfile$" . ruby-mode)
	   ("[Rr]akefile$" . ruby-mode))
  :interpreter "ruby")
#+end_src

** enhanced-ruby-mode
   Better Ruby Mode.
   - https://github.com/zenspider/enhanced-ruby-mode

   参考:[[http://qiita.com/vzvu3k6k/items/acec84d829a3dbe1427a][enhanced-ruby-mode の概説 - Qiita]]

#+begin_src emacs-lisp
; must be added after any path containing old ruby-mode
;;(use-package enh-ruby-mode)
;;(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))

;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Capfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("[Rr]akefile$" . enh-ruby-mode))
;;(add-to-list 'load-path "~/.emacs.d/elips/el-get/enh-ruby-mode")
;;(add-to-list 'interpreter-mode-alist '("ruby" enh-ruby-mode))

;;(remove-hook 'enh-ruby-mode-hook 'erm-define-faces)
#+end_src

** robe-mode
** robe
   Ruby 用の補完をする. 補完は auto-complete という有名な elisp がある.
   もっと賢いのがオムニ補完と呼ばれるもの. これは文法を解析して補完してくれる. 
   - [[http://codeout.hatenablog.com/entry/2014/02/04/210237][auto-complete + rsense の代わりに auto-complete + robe をつかう - LGTM]]

   el-get 経由で robe-mode を入れる.
   - https://github.com/dgutov/robe

   また, pry というものも必要みたい. 詳しくは github の README 参照で.

#+begin_src bash
gem install pry pry-doc 
#+end_src

   設定を追記.

#+begin_src emacs-lisp
(use-package robe
  :init
  (add-hook 'ruby-mode-hook 'robe-mode)
  :config
  (setq robe-highlight-capf-candidates nil))
#+end_src

** ruby-electric.el
  electric editing commands for ruby files
  - https://github.com/qoobaa/ruby-electric

  かっこや do end などの対応関係を自動で補正してくれる

  end が２つ挿入されるので、停止

#+begin_src emacs-lisp
;;(use-package  ruby-electric
;;  :disabled t
;;  :init
;;  (add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
;;  :config
;;  (setq ruby-electric-expand-delimiters-list nil)
;;)
#+end_src

** ruby-block
  かっこや do end などの対応関係を自動でハイライトしてくれる

#+begin_src emacs-lisp
(use-package ruby-block
  :commands ruby-block-mode
  :init
  (add-hook 'ruby-mode-hook '(lambda () (ruby-block-mode t)))
  :config
  (setq ruby-block-highlight-toggle t))
#+end_src

** ruby-refactor
  Ruby 用リファクタリングツール
  - https://github.com/ajvargo/ruby-refactor.git

#+begin_src emacs-lisp
(use-package ruby-refactor
  :config
  (add-hook 'ruby-mode-hook '(lambda () (ruby-refactor-mode-launch))))
#+end_src

** helm-rdefs
   rdefs はソースコードの class や module, def といった宣言のラインを引っ張り出してくれるツール.

#+begin_src bash
gem install rdefs
#+end_src

 helm I/F を経由して, Emacs から利用することができる.
 - https://github.com/saidie/emacs-helm-rdefs

 .emacs の設定は以下.

#+begin_src emacs-lisp
(require 'helm)
(require 'helm-rdefs)
(add-hook 'ruby-mode-hook
          (lambda ()
            (define-key ruby-mode-map (kbd "C-c @") 'helm-rdefs)))
#+end_src

* 補完
** yasnippet-ruby
   Emacs のスニペット挿入機能といえば, yasnippet だが, その Ruby 用テンプレート群をいれる.

   ここからダウンロードして, yasnippet のスニペット一覧に突っ込む!
   - https://github.com/bmaland/yasnippet-ruby-mode

 いちおう, yasnippets の設定も載せておく. ここでは, ~/.emacs.d/snippets にいれた.

#+begin_src emacs-lisp
(require 'yasnippet)
(yas/load-directory "~/.emacs.d/snippets")
(yas-global-mode 1)

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'yas-insert-snippet)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'yas-visit-snippet-file)
#+end_src

* デバッグ
** ruby-debug
   標準ライブラリのデバッカ. ステップ実行できる.
   elisp は ruby のソースに梱包されている.
   - [[http://futurismo.biz/archives/2358][Emacs で rubydb を利用してステップ実行する | Futurismo]]
  
#+begin_src emacs-lisp
(use-package rubydb :commands rubydb)
#+end_src

** inf-ruby
  emacs から irb を操作

  #+begin_src emacs-lisp
(use-package inf-ruby
  :commands inf-ruby
  :init
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  )
#+end_src

** autotest
   rspec 自動実行.

#+begin_src emacs-lisp
;; 動かん!
;; (use-package autotest)
#+end_src

** rspec-mode
   rspec 拡張

#+begin_src emacs-lisp
(use-package rspec-mode
  :defer 20
  :commands rspec-mode
  :config
  (add-hook 'ruby-mode-hook 'rspec-mode)
  ;; (rspec-install-snippets)
  :config
  (custom-set-variables '(rspec-use-rake-flag nil))
  (custom-set-faces))
#+end_src

** minitest 
   A minitest mode for emacs 
   - https://github.com/arthurnn/minitest-emacs

  rake とか bundle とか、本格的にプロジェクト管理していないと
  利用できない. quickrun のほうが良さげ.

#+begin_src emacs-lisp
(use-package minitest
  :init
  (add-hook 'ruby-mode-hook 'minitest-mode))
;;  :config
;;  (minitest-install-snippets))
#+end_src

** pry
   inf-ruby よりも高機能らしい REPL.
   - https://github.com/jacott/emacs-pry

#+begin_src emacs-lisp
(require 'pry)
;; optional suggestions
(global-set-key [S-f9] 'pry-intercept)
(global-set-key [f9] 'pry-intercept-rerun)
#+end_src

* 静的解析
** flycheck
   -> programming に移動.

** robocop 
   checkstyle のようなスタイルの解析

   gem install rubocop
   
#+begin_src emacs-lisp
(use-package rubocop
  :init
  (add-hook 'ruby-mode-hook 'rubocop-mode))
#+end_src

* Rails
** projectile-rails
   Ruby on rails 用. 
   - https://github.com/asok/projectile-rails

#+begin_src emacs-lisp
(use-package projectile-rails
  :disabled t
  :commands (projectile-rails-on)
  :init
  (add-hook 'projectile-mode-hook 'projectile-rails-on))
#+end_src

