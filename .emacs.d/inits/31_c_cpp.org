* C 言語・ C++
  C 言語・ C++ のための設定.
  - [[http://tuhdo.github.io/c-ide.html#sec-2][C/C++ Development Environment for Emacs]]
  - [[http://at-aka.blogspot.jp/2006/12/emacs-c.html][clmemo@aka: Emacs で C 言語プログラミングを始める人へのイントロダクション]]
  - [[http://sakito.jp/emacs/emacsobjectivec.html][Emacs で iPhone アプリ開発を快適にするための設定 : 紹介マニア]]

** cc-mode
   C, C++, Objc, Java などなどをいっぺんに設定するモード
   - [[http://cc-mode.sourceforge.net/][CC Mode]]

   マニュアル.
   - [[http://cc-mode.sourceforge.net/html-manual/index.html][CC Mode Manual]]

   c-mode-common-hook は java にも適用されてしまうようだ.
   - [[http://www.gnu.org/software/emacs/manual/html_node/ccmode/CC-Hooks.html][CC Hooks - CC Mode Manual]]

#+begin_src emacs-lisp
(use-package cc-mode
  :init
  ;; c-mode-common-hook は C/C++ の設定
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (setq c-default-style "k&r") ;; カーニハン・リッチースタイル
	      (setq indent-tabs-mode nil)  ;; タブは利用しない
	      (setq c-basic-offset 2)      ;; indent は 2 スペース
	      )))
#+end_src

** Key bindings
   - M-j, C-M-j コメントで * を入れて改行してくれる.

** c-mode
   C 言語固有設定

** c++-mode
   C++ 言語固有設定.
   - [[http://www.emacswiki.org/emacs/CPlusPlusMode][EmacsWiki: C Plus Plus Mode]]

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;; Enable case-insensitive searching
(set-default 'semantic-case-fold t)
#+end_src

* Error Check
  今は, flymake よりも flycheck のほうがモダン.

** flycheck
   gcc, clnag, cppcheck が default のチェッカーとして用意されている.
   - [[https://flycheck.readthedocs.org/en/latest/guide/languages.html#c-c][Supported languages - Flycheck 0.23-cvs]]

   参考: 今は自分で定義しなくても build-in されているよう.
   - https://github.com/jedrz/.emacs.d/blob/master/setup-flycheck.el
   - [[http://qiita.com/akisute3@github/items/6fb94c30f92dae2a24ee][Emacs - flycheck で C/C++ のエラーチェック定義を追加する - Qiita]]

#+begin_src emacs-lisp
(require 'flymake)
(add-hook 'c-mode-common-hook 'flycheck-mode)
#+end_src

   - checker の変更は M-x flycheck-select-checker
   - helm-flycheck で helm i/f から エラーを選択.

*** gcc
   gcc だとなにも検出してくれない.なんでだろう.
   -> 結果が日本語表示だったから

   - [[http://futurismo.biz/archives/2992][Flycheck で g++ の日本語表記のコンパイルエラーがパースできていなかった (C/C++) | Futurismo]]

#+begin_src emacs-lisp
(defmacro flycheck-define-clike-checker (name command modes)
  `(flycheck-define-checker ,(intern (format "%s" name))
     ,(format "A %s checker using %s" name (car command))
     :command (,@command source-inplace)
     :error-patterns
     ((warning line-start (file-name) ":" line ":" column ": 警告:" (message) line-end)
      (error line-start (file-name) ":" line ":" column ": エラー:" (message) line-end))
     :modes ',modes))
(flycheck-define-clike-checker c-gcc-ja
			       ("gcc" "-fsyntax-only" "-Wall" "-Wextra")
			       c-mode)
(add-to-list 'flycheck-checkers 'c-gcc-ja)
(flycheck-define-clike-checker c++-g++-ja
			       ("g++" "-fsyntax-only" "-Wall" "-Wextra" "-std=c++11")
			       c++-mode)
(add-to-list 'flycheck-checkers 'c++-g++-ja)
#+end_src

* Refactoring
** semantic-refactoring
   Semantic Refactor is a refactoring tool for C/C++.
   - https://github.com/tuhdo/semantic-refactor

   ついに見つけた, extract method.
   menu で番号を選択するとバグっているので, Enter で選択.(そのうちなおるかと)

#+begin_src emacs-lisp
(use-package srefactor
  :config
  (define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
  (define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point))
#+end_src

* Completion 
** auto-complete-c-headers
   auto-complete ヘッダの情報源
   - https://github.com/mooz/auto-complete-c-headers

#+begin_src emacs-lisp
(use-package auto-complete-c-headers 
  :init
  (add-hook 'c++-mode-hook '(setq ac-sources (append ac-sources '(ac-source-c-headers))))
  (add-hook 'c-mode-hook '(setq ac-sources (append ac-sources '(ac-source-c-headers)))))
#+end_src

** clang-complete-async
   clang を利用した 補完. 構造体とかもばっちり!
   - https://github.com/Golevka/emacs-clang-complete-async

#+begin_src emacs-lisp
(use-package auto-complete-clang-async
  :init
  (defun ac-cc-mode-setup ()
    (setq ac-clang-complete-executable "~/.emacs.d/el-get/repo/clang-complete-async/clang-complete")
    (setq ac-sources (append ac-sources '(ac-source-clang-async)))
    (ac-clang-launch-completion-process))

  (defun my-ac-config ()
    (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
    (add-hook 'auto-complete-mode-hook 'ac-common-setup)
    (global-auto-complete-mode t))
  (my-ac-config))
#+end_src

** function-args
   C/C++ 用の 補完.  CEDET のモダンな置き換え. clang 使えないとき用.
   - https://github.com/abo-abo/function-args

   moo-complete で構造体やクラス変数が置換できるのがうれしい.

   - M-o moo-complete semantic な補完
   - M-i  fa-show 関数ヒントをポップアップ
   - M-j  fa-jump-maybe ポップアップ状態でオスとジャンプ
   - moo-propose-overide オーバーライドを suggest
   - moo-propose-variable 変数を suggest

#+begin_src emacs-lisp
(use-package function-args
  :config
  (fa-config-default)

  (define-key function-args-mode-map (kbd "M-o") nil)
  (define-key c-mode-map (kbd "C-M-:") 'moo-complete)
  (define-key c++-mode-map (kbd "C-M-:") 'moo-complete)
  
  (custom-set-faces
   '(fa-face-hint ((t (:background "#3f3f3f" :foreground "#ffffff"))))
   '(fa-face-hint-bold ((t (:background "#3f3f3f" :weight bold))))
   '(fa-face-semi ((t (:background "#3f3f3f" :foreground "#ffffff" :weight bold))))
   '(fa-face-type ((t (:inherit (quote font-lock-type-face) :background "#3f3f3f"))))
   '(fa-face-type-bold ((t (:inherit (quote font-lock-type-face) :background "#999999" :bold t))))))
#+end_src

** rtags
   clang をつかった便利機能詰め合わせ.
   - https://github.com/Andersbakken/rtags

   設定が大変そうだな..  これは今回は挫折.

   fixit って, 自動エラー修正? スゴそう.


* Document
** ggtags
   ggtags も c 言語ように eldoc 機能を提供している.

** c-eldoc
   C 言語用 eldoc 機能.
   - https://github.com/mooz/c-eldoc
   - [[http://d.hatena.ne.jp/mooz/20100421/p1][c-eldoc.el で C 言語プログラミング革命 - mooz deceives you]]

#+begin_src emacs-lisp
(use-package c-eldoc
  :init
  (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
  (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
  :config
  (setq c-eldoc-buffer-regenerate-time 60))
#+end_src


* Debugger
** gdb
   M-x gdb
   標準搭載.

** realgud
   M-x realgud:gdb
   - https://github.com/rocky/emacs-dbgr/wiki/gdb-notes
