* Python
  Python 環境.

* シンタックスハイライト
  python.el は公式, python-mode.el は Python コミュニティによって作成されたもの.

** python
   Emacs にデフォルトではいっているやつ.

** python-mode
   Python コミュニティによって作成されたもの.
   - [[https://github.com/emacsmirror/python-mode][emacsmirror/python-mode]]   
   - [[https://launchpad.net/python-mode/][python-mode.el in Launchpad]]
   - [[http://tnt.math.se.tmu.ac.jp/~tetsushi/nzmath/emacs-python-mode.html][Guide - Software - Emacs - python-mode]]

   ショートカットがまとまっている.
   - [[http://ikautimituaki.hatenablog.com/entry/20111120/1321806070][python-mode の便利なショートカットまとめ - まったりいんふぉまてぃくすめもらんだむ]]

#+begin_src emacs-lisp
(if linux-p
    (setq py-install-directory "~/.emacs.d/el-get/repo/python-mode"))
(if windows-p
    (setq py-install-directory "C:\cygwin64\home\tsu-nera\dotfiles\.emacs.d\el-get\repo\python-mode"))
(add-to-list 'load-path py-install-directory)
(require 'python-mode)
(add-hook 'python-mode-hook
          '(lambda ()
             (setq indent-tabs-mode nil)
             (setq indent-level 4)
             (setq python-indent 4)
             (setq tab-width 4)
             (setq imenu-create-index-function 'python-imenu-create-index)
             ))

;; use-package が動かない。
;; (use-package python-mode)
;; (use-package python-mode
;;   :mode "\\.py$"
;;   :interpreter "python"
;;   :init
;;   (add-hook 'python-mode-hook
;;             '(lambda ()
;;                (setq indent-tabs-mode nil)
;;                (setq indent-level 4)
;;                (setq python-indent 4)
;;                (setq tab-width 4)
;;                (setq imenu-create-index-function 'python-imenu-create-index)
;;                )))
#+end_src

* 補完   
** jedi
   Python のオムニ補完 (かしこい補完) をしてくれる.
   - [[http://qiita.com/yuu116atlab/items/2a62cb880ac863dcc8ef][emacs-jedi の install - Qiita]]
   - https://github.com/tkf/emacs-jedi

   virtualenv が必要.

#+begin_src bash
pip install virtualenv
#+end_src

  初回利用時には、M-x jedi:install-server

  他の環境で動かないので、封印

#+begin_src emacs-lisp
;;(add-hook 'python-mode-hook 'jedi:setup)
;; (add-hook 'python-mode-hook 'jedi:ac-setup) ;; auto-complete のソースに追加
;; (setq jedi:complete-on-dot t)
#+end_src

 jump もできる.
 - C-c . jedi:goto-definition
 - C-c , jedi:goto-definition-pop-marker

* リファクタリング
  参考リンク:
  - [[http://stackoverflow.com/questions/28796/what-refactoring-tools-do-you-use-for-python][What refactoring tools do you use for Python? - Stack Overflow]]
  
** Ropemacs
   Python 用のリファクタリングツール.
   - [[http://rope.sourceforge.net/ropemacs.html][ropemacs, rope in emacs]]
   - https://github.com/python-rope/ropemacs

  うごかないよーん. python3 で動くのかな??

  - https://github.com/abingham/traad

#+begin_src emacs-lisp
;; (autoload 'pymacs-apply "pymacs")
;; (autoload 'pymacs-call "pymacs")
;; (autoload 'pymacs-eval "pymacs" nil t)
;; (autoload 'pymacs-exec "pymacs" nil t)
;; (autoload 'pymacs-load "pymacs" nil t)

;; (require 'pymacs)
;; (pymacs-load "ropemacs" "rope-")
;; (setq ropemacs-enable-autoimport t)
#+end_src

** traad
  - https://github.com/abingham/traad

* コーディング支援
** helm-pydoc
   pydoc の helm i/f.
   
#+begin_src emacs-lisp
(use-package helm-pydoc
   :init
   (define-key python-mode-map (kbd "C-c C-d") 'helm-pydoc))
#+end_src

** quickrun
   quickrun を利用すれば, python コードを Emacs から実行可能.
   - https://github.com/syohex/emacs-quickrun
     
   システムの version が 3 で, Emacs からは 2 を利用したいときは,
   以下のようにすれば実行コマンドをオーバライドできる.
   
#+begin_src emacs-lisp
(eval-after-load 'quickrun
  '(progn
     (quickrun-add-command "python" '((:command . "python2"))
			   :override t)))
#+end_src

** TODO iPython
   インタラクティブなデバッグ環境.


* 静的解析
** flycheck
   以下が利用できる（らしい) .
   - [[http://qiita.com/tnoda_/items/1edcdf83c8824f13c5be][Emacs - Flycheck を Python で使うためにしたことメモ - Qiita]]
     - flake8
     - pylint

#+begin_src emacs-lisp
;; (add-hook 'python-mode-hook 'my/turn-on-flycheck-mode)
#+end_src

 flake8 をつかってみようか. #noqa をつけると、エラー対象外.
 
#+begin_src text
pip install flake8
#+end_src

  - [[http://qiita.com/kitsuyui/items/5ab4608003a29ff7689f][Python の Lint (文法チェッカ) まとめ - flake8 + hacking を使う - - Qiita]]

flake8-python2 を利用するようにする.

-> ArchLinux から Ubuntu にしたら動かなくなっちゃった・・・
   Python 書く日まで封印

#+begin_src emacs-lisp
;; (flycheck-define-checker python2-flake8
;;  "A Python syntax and style checker using Flake8.
;;   Requires Flake8 2.0 or newer. See URL
;;  `https://pypi.python.org/pypi/flake8'."
;;  :command ("flake8-python2"
;;            "--format=default"
;;            (config-file "--config" flycheck-flake8rc)
;;            (option "--max-complexity" flycheck-flake8-maximum-complexity nil
;;                    flycheck-option-int)
;;            (option "--max-line-length" flycheck-flake8-maximum-line-length nil
;;                    flycheck-option-int)
;;            source)
;;  :error-filter (lambda (errors)
;;                  (let ((errors (flycheck-sanitize-errors errors)))
;;                    (mapc #'flycheck-flake8-fix-error-level errors)
;;                    errors))
;;  :error-patterns
;;  ((warning line-start
;;            (file-name) ":" line ":" (optional column ":") " "
;;            (id (one-or-more (any alpha)) (one-or-more digit)) " "
;;            (message (one-or-more not-newline))
;;            line-end))
;;  :modes python-mode)
;;
;; (add-hook 'python-mode-hook 
;;          (lambda () (flycheck-select-checker 'python2-flake8)))
#+end_src

* タグジャンプ
** Pygments
  Pygments というのをつかうらしい. 
  - http://pygments.org/
  - https://github.com/yoshizow/global-pygments-plugin

  おっと、3.x は現在未サポート. 2015/07

** etags
  これが使えた！
  - http://stackoverflow.com/questions/3501040/how-can-i-use-meta-dot-m-in-python-with-emacs#

* Links
  - [[http://www.emacswiki.org/PythonProgrammingInEmacs][EmacsWiki: Python Programming In Emacs]]
  - [[http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/][Emacs as a Python IDE - Jessica Hamrick]]
  - [[http://pedrokroger.net/configuring-emacs-python-ide/][Configuring Emacs as a Python IDE - Pedro Kroger]]
  - [[http://uchikoshi22.hatenadiary.jp/entry/20110925/1316936253][Emacs を Python 用 IDE としてセットアップ - uchikoshi22's blog]]
  - [[http://d.hatena.ne.jp/cou929_la/20110525/1306321857][emacs の python 開発環境を整える - フリーフォーム フリークアウト]]
  - [[http://blog.kzfmix.com/entry/1334218401][Emacs の Python 開発環境を整えた]]
  - [[http://lambdalisue.hatenablog.com/entry/2013/06/23/071344][Vim を最強の Python 開発環境にする 2 - Λ Lisue's blog]]
  - [[https://github.com/gabrielelanaro/emacs-for-python][gabrielelanaro/emacs-for-python]]
