* Welcome To Emacs!!
  最新の開発リポジトリ.
  - http://git.savannah.gnu.org/cgit/emacs.git

#+begin_src bash
git clone git://git.savannah.gnu.org/emacs.git
#+end_src

  github のクローン
  - https://github.com/emacs-mirror/emacs

  人気パッケージダウンロードランキング!!
  - http://melpa.org

* General Settings
** 日本語設定

#+begin_src emacs-lisp
(setenv "LANG" "ja_JP.UTF-8")
#+end_src

** customize の出力先
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/inits/02_custom.el")
(if (file-exists-p (expand-file-name "~/.emacs.d/inits/02_custom.el"))
    (load (expand-file-name custom-file) t nil nil))
#+end_src

** generic-x
   いろんなメジャーモード.
   
   rubikichi さんの本では, これは default にすべき! と書いてあった.

#+begin_src emacs-lisp
(use-package generic-x)
#+end_src

** Variable binding depth exceeds max-specpdl-size error
   以下の行を追加.
   - [[http://d.hatena.ne.jp/a666666/20100221/1266695355][Variable binding depth exceeds max-specpdl-size エラー]]

#+begin_src emacs-lisp
(setq max-specpdl-size 6000)
#+end_src

** 自動閉じ括弧挿入
   -> smartparens に置き換え

#+begin_src emacs-lisp
;; (electric-pair-mode 1)
#+end_src

** yes or no
  問い合わせを簡略化 A yes/no を y/n

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Backup/Autosave
   .emacs.d/backup にバックアップファイルを保存する.

   make-auto-save-file-name: Wrong type argument: stringp, (\,
   (expand-file-name "~/.emacs.d/backup"))

   うまく動いていないので, 封印.
   
#+begin_src emacs-lisp
;; (add-to-list 'backup-directory-alist 
;; 	     (cons "." "~/.emacs.d/backup"))
;; (setq auto-save-file-name-transforms
;;       `((".*" ,(expand-file-name "~/.emacs.d/backup") t)))
#+end_src

** symlink は必ず追いかける

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

** GC の回数を減らして高速化

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 10 gc-cons-threshold))
#+end_src

** other

#+begin_src emacs-lisp
;;; 右から左に読む言語に対応させないことで描画高速化
(setq-default bidi-display-reordering nil)

;;; 同じ内容を履歴に記録しないようにする
(setq history-delete-duplicates t)

;;; インデントに TAB を使わないようにする
(setq-default indent-tabs-mode nil)

;;; GC を減らして軽くする
(setq gc-cons-threshold (* 10 gc-cons-threshold))

;;; ログの記録行数を増やす
(setq message-log-max 10000)

;;; 履歴をたくさん保存する
(setq history-length 1000)
#+end_src

** undohist
   ファイルの履歴を管理
#+begin_src emacs-lisp
(use-package undohist
  :config
  (undohist-initialize))
#+end_src

** real-auto-save
   auto save buffer.
   - [[https://github.com/ChillarAnand/real-auto-save][ChillarAnand/real-auto-save · GitHub]]

#+begin_src emacs-lisp
;; (use-package real-auto-save)
;;  :init
;;  (add-hook 'prog-mode-hook 'real-auto-save-mode)
;;  (add-hook 'org-mode-hook 'real-auto-save-mode))
#+end_src
   
* Key Bindings
** Global Keys
   よくわすれる, C や M の意味.
   - [[http://www.emacswiki.org/emacs/Emacs%e3%83%93%e3%82%ae%e3%83%8a%e3%83%bc#toc9][EmacsWiki: Emacs ビギナー]]

#+begin_src emacs-lisp
(global-set-key (kbd "C-/")     'undo)
(global-set-key (kbd "C-S-i")   'indent-region)
(global-set-key (kbd "C-m")     'newline-and-indent)
#+end_src

** 削除系
   | C-k | kill-line     |
   | M-d | kill-word     |
   | M-k | kill-sentence |

#+begin_src emacs-lisp
(global-set-key (kbd "C-h")     'backward-delete-char)
#+end_src

 もともとは, C-h はミニバッファでヘルプを見るための割り当て.
 - [[http://openlab.dino.co.jp/2007/09/25/23251372.html][Ctrl+h で Emacs のヘルプが見たくない人のための設定 - ディノオープンラボラトリ]]

#+begin_src emacs-lisp
;; (load "term/bobcat")
;; (when (fboundp 'terminal-init-bobcat)
;;   (terminal-init-bobcat))
#+end_src

** カーソル位置の単語を
    - [[http://www.emacswiki.org/emacs/CopyWithoutSelection#toc4][EmacsWiki: Copy Without Selection]]

*** copy-word-at-point

#+begin_src emacs-lisp
(defun get-point (symbol &optional arg)
  "get the point"
  (funcall symbol arg)
  (point))

(defun copy-thing (begin-of-thing end-of-thing &optional arg)
  "copy thing between beg & end into kill ring"
  (save-excursion
    (let ((beg (get-point begin-of-thing 1))
	  (end (get-point end-of-thing arg)))
      (copy-region-as-kill beg end))))

(defun copy-word-at-point (&optional arg)
  "Copy words at point into kill-ring"
  (interactive "P")
  (copy-thing 'backward-word 'forward-word arg))

;; (global-set-key (kbd "C-M-w") 'copy-word-at-point)
;; 読み取りモードのときに
#+end_src

    現在位置の word を削除
    - [[http://dev.ariel-networks.com/wp/documents/aritcles/emacs/part16][「Emacs のトラノマキ」連載第 16 回「元 Vimmer が考える Emacs の再設計」 (深町英太郎) ]]

*** kill-word-at-point
#+begin_src emacs-lisp
(defun kill-word-at-point ()
  (interactive)
  (let ((char (char-to-string (char-after (point)))))
    (cond
     ((string= " " char) (delete-horizontal-space))
     ((string-match "[\t\n -@\[-`{-~]" char) (kill-word 1))
     (t (forward-char) (backward-word) (kill-word 1)))))

(global-set-key "\M-d" 'kill-word-at-point)
#+end_src

** key-guide
   キーバインドを教えてくれる.
  - https://github.com/kai2nenobu/guide-key
  - [[http://rubikitch.com/2014/08/30/guide-key/][もう迷子にならない! 今の Emacs は自動的に次のキー操作を教えてくれるゾ!!]]

#+begin_src emacs-lisp
(use-package guide-key
  :disabled t
  :config
  (guide-key-mode 1)  ; Enable guide-key-mode
  (setq guide-key/popup-window-position 'bottom)
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4")))
#+end_src

** chord-key
   複数キー同時押しにキーバインド割り当て. 
   親指シフト的なバインドができる.

#+begin_src emacs-lisp
(use-package key-chord
  :defer 20
  :config
  (key-chord-mode 1)  
  (setq key-chord-two-keys-delay 0.04))
#+end_src

** hydra
   おもしろい記事をかく abo-abo さんの作品.
   - https://github.com/abo-abo/hydra
   - [[http://oremacs.com/2015/01/20/introducing-hydra/][Behold The Mighty Hydra! · (or emacs]]

   smartrep と機能が競合. そのうちどちらかに統一する.
   - [[http://rubikitch.com/2015/01/25/hydra/][同系統のコマンドを連続的に実行するときプレフィクスキーを省略する | るびきち]]

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

  レシピは wiki にある.
  - https://github.com/abo-abo/hydra/wiki/Hydras%20by%20Topic
    
*** 文字の大きさを調整

#+begin_src emacs-lisp
(global-set-key
 (kbd "C-x 9")
 (defhydra hydra-zoom()
  "zoom"
  ("+" text-scale-increase "in")
  ("-" text-scale-decrease "out")))
#+end_src

*** move
    - [[http://oremacs.com/2015/02/28/hydra-repeat/][Hydra-repeat · (or emacs]]

#+begin_src emacs-lisp
(global-set-key
 (kbd "C-x q")
 (defhydra hydra-move ()
   "move"
   ("f" forward-char "right")
   ("b" backward-char "left")
   ("n" next-line "down")
   ("p" previous-line "up")
   ("SPC" scroll-up-command "down")
   ("<backspace>" scroll-down-command "up")
   ("." hydra-repeat "repeat")))
#+end_src

** goto どっかにとんでいく処理
   M-g の 仕様 (24.4)   goto-map は M-g にバインドされている.
   - TAB: move-to-column
   - p: previous-error
   - n: next-error
   - g: goto-line
   - c: goto-char

   参考:
   - [[http://g000001.cddddr.org/3628335601][#:g1: M-g を活用しよう]]

#+begin_src emacs-lisp
(define-key goto-map [?b] #'browse-url-at-point)
(define-key goto-map [?w] #'browse-url-with-eww)
#+end_src

** bind-key
   use-package のサブモジュール.
   キー割り当ての設定関数 define-key を完全に置き換えます.
   - [[http://rubikitch.com/2014/09/10/bind-key/][emacs bind-key.el :define-key を直接書くのは時代遅れ!Emacs の重鎮が行っているスタイリッシュキー割り当て管理術!]]
      
   個人用に割り当てたキーを列挙できる ( M-x describe-personal-keybindings )

*** example
#+begin_src text
(global-set-key (kbd "C-c x") 'my-ctrl-c-x-command)
(bind-key "C-c x" 'my-ctrl-c-x-command)

(define-key some-other-mode-map (kbd "C-c x") 'my-ctrl-c-x-command)
(bind-key "C-c x" 'my-ctrl-c-x-command some-other-mode-map)
#+end_src

* Start Up
** Basic
  起動時の設定

#+begin_src emacs-lisp
;; 起動時の scratch メッセージは表示しない
(setq initial-scratch-message nil)

;; 起動時の画面はいらない
(setq inhibit-startup-message t)

;; ウィンドウマネージャ環境での起動時間カイゼン
(modify-frame-parameters nil '((wait-for-wm . nil)))

;; byte-compile warning の無視
;; http://tsengf.blogspot.jp/2011/06/disable-byte-compile-warning-in-emacs.html
;; ignore byte-compile warnings 
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete 
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))
#+end_src

** inits, el-get 管理外の elisp のバイトコンパイル.
   - [[http://www.bookshelf.jp/soft/meadow_18.html][Meadow/Emacs memo: バイトコンパイル]]
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#Compilation-Functions][Compilation Functions - GNU Emacs Lisp Reference Manual]]

   すでにロードしている場合は, 遅延が効かない.. 封印

#+begin_src emacs-lisp
;; (use-package byte-compile
;;   :config
;;   (add-hook 'after-init-hook
;;             '(lambda () 
;;                (byte-recompile-directory "~/.emacs.d/elisp/" 0)
;;                (byte-recompile-directory "~/.emacs.d/mylisp/" 0))))
#+end_src

** 時間計測
   これは普段は封印している. 時間を知りたくなったときに利用する.

*** 起動時間の把握
    M-x emacs-init-time という関数を実行すると, 起動にかかる時間がわかる.

*** esup をつかう
    esup を利用すると, 詳細な起動時間がわかる.
    - https://github.com/jschaf/esup

#+begin_src emacs-lisp
(use-package esup :disabled t)
#+end_src

   自分の環境だと, inits ディレクトリ配下がすべて結果が要約されてしまい,
   よくわからなかった.

*** initchart をつかう
    Emacs のスタートアップを視覚化する.
    - [[http://qiita.com/yuttie/items/0f38870817c11b2166bd][Emacs のスタートアップを視覚的に理解する - Qiita]]
    - https://github.com/yuttie/initchart

#+begin_src emacs-lisp
(use-package initchart 
  :disabled t
  :config
  (initchart-record-execution-time-of load file)
  (initchart-record-execution-time-of require feature))
#+end_src

** Emacs client
   server start for emacs-client
   - http://d.hatena.ne.jp/syohex/20101224/1293206906

 #+begin_src emacs-lisp
(use-package server
 :config
 (unless (server-running-p)
   (server-start)))
 #+end_src

  どうも, Elscreen が scratch を初期画面で開いてしまうようだ.

** Original Message
#+begin_src emacs-lisp
(defvar my-startup-display-message "\nHello Emacs!!\nHappy Hacking (^o^)/\n")

(defun my-startup-display-mode ()
  "Sets a fixed width (monospace) font in current buffer"
  (setq buffer-face-mode-face '(:height 1000))
  (buffer-face-mode))

(defun my-startup-display ()
  "Display startup message on buffer"
  (interactive)
  (let ((temp-buffer-show-function 'switch-to-buffer))
    (with-output-to-temp-buffer "*MyStartUpMessage*"  
      (princ my-startup-display-message)))
  (my-startup-display-mode))

(add-hook 'after-init-hook 'my-startup-display)
#+end_src


* TearDown
  終了時の設定.

#+begin_src emacs-lisp
;;; 終了時にオートセーブファイルを消す
(setq delete-auto-save-files t)
#+end_src

* netrc
  build-in のパスワード管理.
  パスワード自体は ~/.netrc に書き込む. 

#+begin_src emacs-lisp
(use-package netrc)
#+end_src

* Tips
** Emacs と X のクリップポードを共有
   - http://tubo028.hatenablog.jp/entry/2013/09/01/142238

   tramp で VM に乗り込むと, うまく動作しない.
   ssh の X forwarding の設定が必要?
   - http://superuser.com/questions/326871/using-clipboard-through-ssh-in-vim

   tramp するときだけ封印することにする. もっとうまい解決方法ないかな??
   
   Shift+Insert でも貼り付けできるので, とりあえずはこれで回避.
   
** BEEP  
   Ignore beep (for windows)
   
#+begin_src emacs-lisp
(setq visible-bell t)
(setq ring-bell-function 'ignore)
#+end_src

** カレントディレクトリのパス取得
   - [[http://ergoemacs.org/emacs/emacs_copy_file_path.html][Emacs Lisp: Copy File Path of Current Buffer]]
   - [[http://qiita.com/ShingoFukuyama/items/8f1d3342180d42ad9f78][Emacs - 開いているファイル/ フォルダのパスをクリップボードに保存する - Qiita]]

#+begin_src emacs-lisp
(defun my/get-curernt-path ()
    (if (equal major-mode 'dired-mode)
	default-directory
	(buffer-file-name)))

(defun my/copy-current-path ()                                                         
  (interactive)
  (let ((fPath (my/get-curernt-path)))
    (when fPath
      (message "stored path: %s" fPath)
      (kill-new (file-truename fPath)))))

(defun my/copy-current-org-link-path ()
  (interactive)
  (let* ((fPath (my/get-curernt-path))
	 (fName (file-relative-name fPath)))
    (my/copy-org-link fPath fName)))

(defun my/copy-org-link (my/current-path my/current-title)
  (let ((orgPath
	 (format "[[%s][%s]]" my/current-path my/current-title)))
    (message "stored org-link: %s" orgPath)
    (kill-new orgPath)))

(global-set-key (kbd "C-c 0") 'my/copy-current-path)
(global-set-key (kbd "C-x @ @") 'my/copy-current-org-link-path)
#+end_src

* workaround
  #+begin_src emacs-lisp
(when emacs25.0-p
  (require 'eieio)
  (defun class-slot-initarg (class-name slot)
    (eieio--class-slot-initarg (eieio--class-v class-name) slot)))
#+end_src
