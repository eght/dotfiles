#+TITLE: Utility
* Utility
  この elisp こそ, Emacs のすごさを示すものだ.

#+begin_src text
  Emacs は OS!
  Emacs は世界!
  Emacs は人生!
#+end_src

* Web Browser: ブラウザ関連
  - [[http://www.emacswiki.org/emacs/BrowseUrl][EmacsWiki: Browse Url]]

#+begin_src emacs-lisp
(when linux-p
  (setq browse-url-generic-program (executable-find "conkeror"))
;;  (setq browse-url-generic-program (executable-find "firefox"))
  (setq browse-url-browser-function 'browse-url-generic))

;; generic default browser
(when windows-p
  (setq browse-url-browser-function 'browse-url-default-windows-browser))

;; 今のポイントしている URL を開く
(global-set-key (kbd "C-c u") 'browse-url-at-point)
(define-key goto-map [?b] #'browse-url-at-point)
#+end_src

** edit-server
   Google Chrome のフォームを emacs で編集. Edit with Emacs.
   - https://github.com/stsquad/emacs_chrome/blob/master/servers/edit-server.el

 #+begin_src emacs-lisp
(use-package edit-server
  :config
  ;; 手動で起動にする.
  ;; (edit-server-start)
  (setq edit-server-new-frame nil))
 #+end_src

** mozRepl
   Emacs で保存時に firefox を reload する.
   - [[https://github.com/bard/mozrepl/wiki][Home · bard/mozrepl Wiki]]
   - https://github.com/bard/mozrepl/blob/master/chrome/content/moz.el
   - [[http://d.hatena.ne.jp/hnw/20110506][Emacs+Firefox+MozRepl でファイルセーブと同時にリロード - hnw の日記]]
   - [[http://qiita.com/hakomo/items/9a99115f8911b55957bb][Emacs で保存時に Firefox のタブを探してリロード - Qiita]]
   - [[http://www.emacswiki.org/emacs/MozRepl][EmacsWiki: Moz Repl]]

   Alt-T でツールバー表示.

*** keybindings
   - C-c C-s" run-mozilla
   - C-M-x"  moz-send-defun
   - C-c C-c" moz-send-defun-and-go
   - C-c C-r" moz-send-region
   - C-c C-l" moz-save-buffer-and-send

 #+begin_src emacs-lisp
(use-package moz
  :commands (moz-reload)
  :config
  (defun moz-reload ()
    (interactive)
    (comint-send-string (inferior-moz-process) "BrowserReload ();")))
 #+end_src

*** conkeror 連携
   - [[https://github.com/bard/mozrepl/wiki/Use-with-Conkeror][Use with Conkeror · bard/mozrepl Wiki]]
   -
     [[http://truongtx.me/2013/10/01/mozrepl-in-combination-with-emacs-for-developing-conkeror/#][Mozrepl in combination with Emacs for developing Conkeror]]
** engine-mode
   簡単に検索が定義できるマクロ.
   - https://github.com/hrs/engine-mode

   エンジンモードプレフぃクス C-c /

#+begin_src emacs-lisp
(use-package engine-mode
  :preface
  (defengine amazon
    "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")
  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
  (defengine twitter
    "https://twitter.com/search?q=%s")
  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=ja&go=Go&search=%s")
  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s")
  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s")
  (defengine futurismo
    "http://www.google.co.jp/search?q=site:futurismo.biz %s")
  (defengine weblio
    "http://ejje.weblio.jp/content/%s")

  ;; define key-bindings
  (global-unset-key (kbd "C-c /"))
  (global-set-key
   (kbd "C-c /")
   (defhydra hydra-search ()
     "search-engine"
     ("d" engine/search-duckduckgo "duckduckgo")
     ("g" engine/search-google "google")
     ("f" engine/search-futurismo "futurismo")
     ("t" engine/search-twitter "twitter")
     ("ej" engine/search-weblio "weblio")
     ("w" engine/search-wikipedia "wikipedia")))
  :config
  (engine-mode t))
#+end_src

** google-this
   Google 検索. これは便利だぁ.
   - [[https://github.com/Bruce-Connor/emacs-google-this][Bruce-Connor/emacs-google-this]]

   代表的な使用方法.
   - C-c / g (RET) でその場のキーワード検索.
   - C-c / w でその場のワードを検索
   - C-c / l でその行を検索
   - C-c / c Google 翻訳

  search-engine に置き換え

#+begin_src emacs-lisp
(use-package google-this
  :disabled t
  :config
  (google-this-mode 1))
#+end_src

** google-translate
   Google 翻訳.
   - [[http://qiita.com/catatsuy/items/ae9875706769d4f02317][卒論を英語で書けと言われしまったあなたにおすすめの Emacs の設定 - Qiita]]
   - [[http://rubikitch.com/2014/12/07/google-translate/][emacs google-translate.el : Google 翻訳で言語自動判別しつつ英訳・和訳する!]]
   - https://github.com/atykhonov/google-translate
   
#+begin_src emacs-lisp
(use-package google-translate
  :bind (("C-x t" . google-translate-enja-or-jaen)
	 ("C-x T" . google-translate-query-translate))
  ;; ;; 翻訳のデフォルト値を設定 (ja -> en) (無効化は C-u する)
  ;; -> patch で自動判別
  ;; (custom-set-variables
  ;;  '(google-translate-default-source-language "ja")
  ;;  '(google-translate-default-target-language "en"))
  :config
  (use-package my-patch-google-translate))
#+end_src

** hackernews
   Simple hacker news client
   - https://github.com/clarete/hackernews.el

#+begin_src emacs-lisp
(use-package hackernews
  :config
  (setq hackernews-top-story-limit 25))
#+end_src

** reddit
   reddit 閲覧モード.
   - https://github.com/death/reddit-mode

#+begin_src emacs-lisp
(use-package reddit
  :config
  (setq reddit-user "tsu-nera"))
#+end_src

** el-pocket
   pocket との連携
   - https://github.com/pterygota/el-pocket

   今は pocket に記事を追加する機能のみ. これからに期待.

#+begin_src emacs-lisp
(use-package el-pocket
  :config
  (el-pocket-load-auth))
#+end_src

** readability
   - https://github.com/ShingoFukuyama/emacs-readability
   - https://readability.com/reading-list
   - https://readability.com/developers/api/reader

   動かない..

#+begin_src emacs-lisp
;;(use-package readability)
#+end_src

** sx
   Stack Exchange Client

#+begin_src emacs-lisp
(use-package sx)
(use-package sx-tab)
#+end_src

** define-word
   英英辞典

#+begin_src emacs-lisp
(use-package define-word)
#+end_src

** bitly
   短縮 URL サービス
   
   トークン取得が必要。面倒になった。

#+begin_src emacs-lisp
;; (use-package bitly)
#+end_src

* memo:メモ・キャプチャー
** Howm
   Function : Evernote を越えるメモ管理ツール
   - http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/howm_config.html
   - http://d.hatena.ne.jp/TakashiHattori/20120627/1340768058

   このページはわかりやすい.
   - [[http://blechmusik.xii.jp/misc/wiliki.cgi?misc%3Asoftware%3AEmacs%3Amode%3Ahowm%3A%E5%85%A5%E9%96%80][misc:software:Emacs:mode:howm:入門]]

#+begin_src emacs-lisp
(setq howm-view-title-header "*") ;; ← howm のロードより前に書くこと
(use-package howm
  :disabled t
  :bind* ("C-c , ," . howm-menu)  
  :config
  ;; *.org を開いたら howm-mode も起動する
  (add-hook 'org-mode-hook 'howm-mode)
 
  ;; howm のメモを置くディレクトリ
  (setq howm-directory "~/Dropbox/howm")

  ;; メニュー表示しない ... なぜか固まる
  ;; (setq howm-menu-top nil)
  
  ;; メニューの言語設定
  (setq howm-menu-lang 'ja)
  ;; howm ファイル名を設定する. org-mode を起動するため拡張子は .org にする.
  (setq howm-file-name-format "%Y-%m-%d-%H%M%S.org")

  ;; grep のかわりに ack を使う. howm-test130321 でテスト.
  ;;  (setq howm-view-use-grep t)
  ;;  (setq howm-view-grep-command "ack")
  ;;  (setq howm-view-grep-option "-Hnr")
  ;;  (setq howm-view-grep-extended-option "")
  ;;  (setq howm-view-grep-fixed-option "--literal")
  ;;  (setq howm-view-grep-expr-option "--match")
  ;;  (setq howm-view-grep-file-stdin-option nil)
 
  ;; キーバインドは C-a C-a にする
  (global-unset-key (kbd "C-x C-a"))
  (setq howm-prefix (kbd "C-x C-a")))
#+end_src

** geeknote
   Evernote クライアント.
   - https://github.com/avendael/emacs-geeknote
   - [[http://qiita.com/torub/items/e2f3a81828f153bdc0b5][Emacs (GNU Emacs on MaxOS) で Evernote を Markdown で編集する - Qiita]]

*** Geeknote の設定
   - https://github.com/VitaliyRodnenko/geeknote

#+begin_src bash
git clone git://github.com/VitaliyRodnenko/geeknote.git
cd geeknote
sudo python setup.py install

geeknote login
geeknote settings --editor "emacsclient"
#+end_src

*** Emacs の設定
    Emacs は server モードで立ち上げておく必要あり.

#+begin_src emacs-lisp
(use-package geeknote
  :disabled t
  :init
  ;; (global-set-key (kbd "C-c g c") 'geeknote-create)
  ;; (global-set-key (kbd "C-c g e") 'geeknote-edit)
  ;; (global-set-key (kbd "C-c g f") 'geeknote-find)
  ;; (global-set-key (kbd "C-c g s") 'geeknote-show)
  ;; (global-set-key (kbd "C-c g r") 'geeknote-remove)
  ;; (global-set-key (kbd "C-c g m") 'geeknote-move)
  )
#+end_src

  geeknote コマンドを eshell 経由で emacs からコールして,
  結果を eshell buffer に出している.

  geeknote の elisp wrpper といったところか.

** evernote-mode
   evernote と org-mode が連携できる??
   - https://github.com/pymander/evernote-mode

   本家のリポジトリはメンテされてない.
   - [[https://code.google.com/p/emacs-evernote-mode/][emacs-evernote-mode - Functions for editing Evernote notes directly from Emacs - Google Project Hosting]]

   自分の記事
   - [[http://futurismo.biz/archives/717][Evernote で Emacs を使う (emacs-evernote-mode) | Futurismo]]

*** install
    ruby 1.9 が必要!!

#+begin_src text
$ gem-1.9 install evernote_oauth
$ ruby-1.9 ruby/setup.rb
#+end_src

**** /usr/bin/enclient.rb error

  /usr/bin/enclient.rb がないとエラーする件は,
  readme に解決方法がかいてあった. 
  複数 ruby バージョンインストール時に発生.

  setup.rb 実施後に, マニュアルでコピーする.

#+begin_src bash
$ sudo cp /usr/bin/ruby1.9/bin/enclient.rb /usr/bin
#+end_src

**** auth token
     事前にトークンを取得して, 以下のようにかく必要あり.
     - (ここから) https://www.evernote.com/api/DeveloperToken.action

#+begin_src text
(setq setq evernote-developer-token "Your developer token.")
#+end_src

*** config
    いろいろ頑張ってみたけど, 使い勝手が悪く使えない子だった.

#+begin_src emacs-lisp
(use-package evernote-mode
  :disabled t
  :init
  (setq evernote-ruby-command "ruby-1.9")
  (global-set-key "\C-cec" 'evernote-create-note)
  (global-set-key "\C-ceo" 'evernote-open-note)
  (global-set-key "\C-ces" 'evernote-search-notes)
  (global-set-key "\C-ceS" 'evernote-do-saved-search)
  (global-set-key "\C-cew" 'evernote-write-note)
  (global-set-key "\C-cep" 'evernote-post-region)
  (global-set-key "\C-ceb" 'evernote-browser)
  )
#+end_src

** camcorder
   Emacs からスクリーンショットを撮影.
   - https://github.com/Bruce-Connor/camcorder.el

   gif 動画が作成できる.

   names に依存.
   - https://github.com/Bruce-Connor/names/

   他, 以下のツールが必要
   - recordmydesktop
   - mplayer
   - imagemagick

   autoload でエラーするので, 
   el-get でインストールしないで, マニュアルインストール.

   エラーするので一旦封印.

 #+begin_src emacs-lisp
(use-package camcorder
  :disabled t
  :if linux-p
  :config
  (define-key camcorder-mode-map (kbd "<f9>") 'camcorder-stop)
  (define-key camcorder-mode-map (kbd "C-x <f9>") 'camcorder-pause)
  (require 'names)
  (setq camcorder-output-directory "~/futurismo/blog/img")
  (setq camcorder-recording-command
	'("recordmydesktop" " --fps 20" " --no-sound"
	  " --windowid " window-id " -o " temp-file
	  " && mkdir -p " temp-dir
	  " && cd " temp-dir
	  " && mplayer -ao null " temp-file " -vo png:z=9"
	  " && convert -resize 640x -colors 32 " temp-dir "* " file
	  "; rm -r " temp-file " " temp-dir)))
 #+end_src
    
** wakatime
   タイムトラッキング
   - https://wakatime.com/dashboard

#+begin_src emacs-lisp
(use-package wakatime-mode
  :if linux-p
  :disabled t
  :preface
  (defun browse-wakatime ()
    (interactive)
    (browse-url "https://wakatime.com/dashboard"))
  :config
  (global-wakatime-mode)
 )
#+end_src

* Password: パスワード管理
** netrc
   build-in のパスワード管理.
   パスワード自体は ~/.netrc に書き込む. 

#+begin_src emacs-lisp
(use-package netrc :defer t)
#+end_src

)* Communication Tools: チャット関連
** twittering-mode
  Emacs Twitter Client
  - [[http://www.emacswiki.org/emacs/TwitteringMode-ja][EmacsWiki: TwitteringMode-ja]]

  M-x twit

#+begin_src emacs-lisp
(use-package twittering-mode
  :commands twit
  :bind ("C-c C-x w" . twittering-update-status-from-pop-up-buffer)
  :config
  (setq twittering-use-master-password t)
  (setq twittering-allow-insecure-server-cert t)
  ;; パスワード暗号ファイル保存先変更 (デフォはホームディレクトリ)
  (setq twittering-private-info-file "~/.emacs.d/twittering-mode.gpg")
  ;; はじめに開くタイムライン
  (setq twittering-initial-timeline-spec-string
        '("tsu_nera"
          ":search/futurismo.biz/"
          ;; "hmi_me"
          "melpa_emacs"))
  (defun browse-twitter ()
      (interactive)
      (browse-url "https://twitter.com/hmi_me")))
#+end_src

*** popwin に閉じ込める
   このアイデアは good idea.
   - [[http://d.hatena.ne.jp/lurdan/20130225/1361806605][twittering-mode を popwin に閉じこめる - *scratch*]]

*** 自前関数でミニバッファからツイート

#+begin_src emacs-lisp
(defun twit-from-minibuffer (x)
  "Tweet message from minibuffer"
  (interactive "sEnter twitter message: ")
  (let ((tweet-message (concat "twitter " x)))
    (shell-command tweet-message)
    (shell-command "org-twit")))

(defun org-fetch-twit ()
  (interactive)
  (shell-command "org-twit"))

(global-set-key (kbd "C-c C-x t") 'twit-from-minibuffer)
(global-set-key (kbd "C-c C-x r") 'org-fetch-twit)
#+end_src

** bitlbee
  yaourt bitlbee でいれた.
  - [[https://wiki.archlinux.org/index.php/bitlbee][Bitlbee - ArchWiki]]
  - [[http://www.emacswiki.org/emacs/BitlBee][EmacsWiki: Bitl Bee]]
  - [[http://emacs-fu.blogspot.jp/2012/03/social-networking-with-bitlbee-and-erc.html][emacs-fu: social networking with bitlbee and erc]]

まだ動かした実績はなし. . . とりあえず入れておくか.

#+begin_src emacs-lisp
;; (use-package bitlbee)
;; (defun i-wanna-be-social ()
;;   "Connect to IM networks using bitlbee."
;;   (interactive)
;;   (erc :server "localhost" :port 6667 :nick "user"))
#+end_src

** ERC
   Emacs のチャットツール.
  
   - [[http://www.emacswiki.org/ERC][EmacsWiki: ERC]]
   - [[http://en.wikipedia.org/wiki/ERC_(software)][ERC (software) - Wikipedia, the free encyclopedia]]
   - [[http://emacs-fu.blogspot.jp/2009/06/erc-emacs-irc-client.html][emacs-fu: ERC: the emacs IRC client]]
   - [[http://sleepboy-zzz.blogspot.jp/2013/07/emacs-ercirc.html][memo: Emacs ERC で IRC を試してみた]]

   - [[http://www.emacswiki.org/emacs/ErcStartupFiles][EmacsWiki: Erc Startup Files]]

#+begin_src emacs-lisp
;; (use-package erc
;;  :commands erc
;;  :config

;; 調子がわるいので, use-package をやめてみる.
(when windows-p
(require 'erc)

  ;; ログイン情報
  ;; (setq erc-server "localhost")
  ;; (setq erc-port "6667")
  ;; (setq erc-nick "tsu-nera")
  ;; (setq erc-password "")

  (defmacro de-erc-connect (command server port nick)
    "Create interactive command `command', for connecting to an IRC server. The
command uses interactive mode if passed an argument."
    (fset command
	  `(lambda (arg)
	     (interactive "p")
	     (if (not (= 1 arg))
		 (call-interactively 'erc)
		 (erc :server ,server :port ,port :nick ,nick)))))
  
 (defmacro asf-erc-bouncer-connect (command server port nick ssl pass)
   "Create interactive command `command', for connecting to an IRC server. The
   command uses interactive mode if passed an argument."
   (fset command
         `(lambda (arg)
           (interactive "p")
	   (if (not (= 1 arg))
	       (call-interactively 'erc)
	     (let ((erc-connect-function ',(if ssl
					       'erc-open-ssl-stream
					     'open-network-stream)))
 	       (erc :server ,server :port ,port :nick ,nick :password ,pass))))))
  
  ;; (de-erc-connect erc-opn "localhost" 6667 "tsu-nera")
#+end_src

*** ログアウト
    - /PART Channel をさる
    - /QUIT msg Server をさる
    - [[http://www.emacswiki.org/emacs/ErcStartupFiles][EmacsWiki: Erc Startup Files]]

#+begin_src emacs-lisp
;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
#+end_src

*** ニックネームハイライト
**** erc-highlight-nicknames
    - [[http://www.emacswiki.org/ErcHighlightNicknames][EmacsWiki: Erc Highlight Nicknames]]

 #+begin_src emacs-lisp
;; (and
;;   (use-package erc-highlight-nicknames)
;;   (add-to-list 'erc-modules 'highlight-nicknames)
;;   (erc-update-modules))
 #+end_src

**** erc-hl-nicks
     erc-highlight-nicknames の改良版か?
   - https://github.com/leathekd/erc-hl-nicks

 #+begin_src emacs-lisp
(use-package erc-hl-nicks)
 #+end_src

*** 通知
**** ERC notification
     登録した単語をみつけたら反応する.
     - [[https://julien.danjou.info/blog/2012/erc-notifications][ERC notifications Julien Danjou]]

#+begin_src emacs-lisp
(add-to-list 'erc-modules 'notifications)
(erc-update-modules)
(setq erc-pals '("tsune" "tsu-nera")
      erc-notify-list erc-pals)
#+end_src
      
**** erc-nick-notify
     呼ばれたら反応する.
     - [[http://www.emacswiki.org/emacs/ErcNickNotify][EmacsWiki: Erc Nick Notify]]
     
     notify-send しか対応していないみたい. Linux 用..
    
     #+begin_src emacs-lisp
(use-package erc-nick-notify
  :commands erc-nick-notify-mode
  :config
  (erc-nick-notify-mode t))
#+end_src
 
**** erc-input-lien-position
 #+begin_src emacs-lisp
(setq erc-input-line-position -2)
 #+end_src

**** growl
     Growl できるっぽい. Growl for windows で通知できるか??
     - [[http://www.emacswiki.org/emacs/ErcGrowl][EmacsWiki: Erc Growl]]
     - https://github.com/samaaron/samaaron-pack/blob/master/config/erc-growl.el
     - https://gist.github.com/danielsz/ac19353e718dde3dea72
     - [[http://qiita.com/rohinomiya/items/5e485d6700eac256af9f][Windows で Growl 通知を行う - Qiita]]

    Growl を利用すると, Alt+x, Alt+Shift+x が利用できなくなるという
    致命的な問題がある.

    %USERPROFILE%\Local Settings\Application Data\Growl\2.0.0.0\user.config

    で Alt+X とかいてあるところをべつのものに修正すればいい.
    - [[http://stackoverflow.com/questions/6495050/how-can-i-use-alt-as-meta-key-in-windows-for-emacs-23-especially-m-x][How can I use Alt as meta key in Windows for Emacs 23, especially M-x? - Stack Overflow]]
    - https://groups.google.com/forum/#!topic/growl-for-windows/Yu3bo3EZ9SA

    To Do Chi Ku という通知用のインタファースもあるが動かなかった
    - [[http://www.emacswiki.org/emacs/ToDoChiKu][EmacsWiki: To Do Chi Ku]]
    - [[http://justinsboringpage.blogspot.jp/2009/09/making-emacs-growl.html][justinhj's coding blog: Making emacs growl]]

#+begin_src emacs-lisp
(when windows-p
  (use-package my-growl-for-windows))
#+end_src

*** erc-match
#+begin_src emacs-lisp
(use-package erc-match)
#+end_src

*** Encoding
    #+begin_src emacs-lisp
   ;; UTF-8
   ;; (setq  erc-server-coding-system '(utf-8 . utf-8))

   ;; Shift-JIS
   ;; (setq erc-server-coding-system に (iso-2022-jp . iso-2022-jp))
    #+end_src

*** width を可変にする
    デフォルトは 78 で折り返し.
    - [[http://www.emacswiki.org/emacs/ErcFilling][EmacsWiki: Erc Filling]]

#+begin_src emacs-lisp
(add-hook 'window-configuration-change-hook 
	  '(lambda ()
	     (setq erc-fill-column (- (window-width) 2))))
#+end_src
*** End of ERC Config
#+begin_src emacs-lisp
)
#+end_src

* multimedia:音楽, マルチメディア 
** emms
   Emacs のためのメディアプレーヤー
   - [[http://www.gnu.org/software/emms/][EMMS - Emacs Multimedia System]]
   - [[http://www.emacswiki.org/emacs/EMMS][EmacsWiki: EMMS]]

*** 基本操作
    - [[http://www.gnu.org/software/emms/manual/index.html#Top][The Emms Manual]]
    まず, emms を起動する. playlist が表示される.

   - emms-play-xxx: 音楽再生
   - emms-add-xxx:  音楽をプレイリストに追加.
   - emms-start: プレイリストを再生

   基本コマンドは以下を参照.
   - [[http://www.gnu.org/software/emms/manual/Basic-Commands.html#Basic-Commands][Basic Commands - The Emms Ma+nual]]

   Emacs で SoundCloud を聞く方法
   - https://github.com/r0man/soundklaus.el

   参考になる config
   - https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/emms-mpd-config.el

*** Settings

   調子が悪いので封印。

 #+begin_src emacs-lisp
(use-package emms-setup
  :disabled t
  :commands emms-stream-init ;; for helm-emms
  :config
  (emms-all)
  (emms-standard)
  
   (emms-default-players)

   ;; RET が動かないので
   (define-key emms-stream-mode-map (kbd "C-c C-c") 'emms-stream-play)
   ;; emms-streams で RET を押したときのデフォルト操作
   (setq emms-stream-default-action "play")
  
  (when linux-p
    (setq emms-source-file-default-directory "~/Music/"))
  
  (require 'emms-volume)  
   #+end_src

   その他として helm-emms が C-x c #にある. 便利.

*** vlc
    https をサポートに追加する.

 #+begin_src emacs-lisp
;; (when linux-p
;;   (use-package emms-player-vlc
;;     :config
;;     (setq emms-player-list '(emms-player-vlc))
;;     (define-emms-simple-player vlc '(file url)
;;       (concat "\\`\\(https?\\|mms\\)://\\|"
;;               (emms-player-simple-regexp
;;                "ogg" "mp3" "wav" "mpg" "mpeg" "wmv" "wma"
;;                "mov" "avi" "divx" "ogm" "ogv" "asf" "mkv"
;;                "rm" "rmvb" "mp4" "flac" "vob" "m4a" "ape"
;;                "asx"))
;;       "vlc" "--intf=rc")))
;; (setq emms-player-list '(emms-player-vlc))
 #+end_src
 
*** mplayer
    - windows http://sourceforge.net/projects/mplayerwin/
    - http://stackoverflow.com/questions/9147823/emms-error-dont-know-how-to-play-track

#+begin_src emacs-lisp
(require 'emms-setup)
(require 'emms-player-mplayer)
(emms-standard)
(emms-default-players)
(define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")
#+end_src

*** volume
    - [[https://www.gnu.org/software/emms/manual/Volume.html][Volume - The Emms Manual]]
    - [[http://anthony.lecigne.net/2014-08-16-emms-mplayer.html][Control the volume with MPlayer in EMMS]]

    .asoundrc を作成して, default のカードを変更した.
   - [[https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture_(%E6%97%A5%E6%9C%AC%E8%AA%9E)][Advanced Linux Sound Architecture (日本語) - ArchWiki]]

   #+begin_src emacs-lisp
(when linux-p
  (setq emms-volume-amixer-control "Master"))
 #+end_src

*** Stream
    ストリームを再生できる. 
    (emms-all) をするか, (require 'emms-streams) で有効になる.
    emms-streams で Default で登録されてる URL がでる.

    WCPE, Classical Music
    - http://www.ibiblio.org/wcpe/wcpe.pls

    BBC Classic (Raido3)
    - http://www.bbc.co.uk/radio/listen/live/r3_aaclca.pls

*** End of Config
 #+begin_src emacs-lisp
)
 #+end_src

** mms-player-mpv-jp-radios
   https://github.com/momomo5717/emms-player-mpv-jp-radios

#+begin_src emacs-lisp
(use-package emms-player-mpv-jp-radios
  :config
  (let ((default-directory "~/.emacs.d/el-get/repo/emms-player-mpv-jp-radios"))
  (add-to-list 'load-path default-directory)
  (normal-top-level-add-subdirs-to-load-path))
  (emms-player-mpv-jp-radios-add "radiko" "radiru"))
#+end_src
   
** jazzradio
   ジャズだって聴ける! 
   - https://github.com/syohex/emacs-jazzradio
   - [[http://d.hatena.ne.jp/syohex/20150208/1423395606][ジャズだって聴ける. そう, Emacs ならね. - Life is very short]]

   本当はクラシックが聴きたいけど. クラシックは emms-stream で我慢.
   内部では mplayer を利用している.

   - mplayer
   - curl

 #+begin_src emacs-lisp
(use-package jazzradio
  :preface
  (defun my/jazzradio-switch (my/jazzradio-channel-url  my/jazzradio-playlist-base-url) ()
	 (if jazzradio--process
	   (jazzradio--stop))
	 (setq jazzradio--process nil)
	 (setq jazzradio--channels-cache  nil)
	 (setq jazzradio-channel-url my/jazzradio-channel-url)
	 (setq jazzradio-playlist-base-url my/jazzradio-playlist-base-url)
	 (jazzradio))
  (defun jazzradio--reset ()
    (interactive)
    (my/jazzradio-switch 
     "http://ephemeron:dayeiph0ne%40pp@api.audioaddict.com/v1/jazzradio/mobile/batch_update?stream_set_key="
     "http://listen.jazzradio.com/webplayer/"))
  (defun technoradio ()
    (interactive)    
    (my/jazzradio-switch
     "http://ephemeron:dayeiph0ne%40pp@api.audioaddict.com/v1/di/mobile/batch_update?stream_set_key="
     "http://listen.di.fm/webplayer/"))
  (defun radiotune ()
    (interactive)    
    (my/jazzradio-switch
     "http://ephemeron:dayeiph0ne%40pp@api.audioaddict.com/v1/radiotunes/mobile/batch_update?stream_set_key="
     "http://listen.radiotunes.com/webplayer/"))
  (defun rockradio ()
    (interactive)    
    (my/jazzradio-switch
     "http://ephemeron:dayeiph0ne%40pp@api.audioaddict.com/v1/rockradio/mobile/batch_update?stream_set_key=")
    "http://listen.rockradio.com/webplayer/"))
#+end_src

*** Windows
    1. curl を cygwin 経由でいれる.
    2. mplayer を入れる
       http://sourceforge.net/projects/mplayerwin/
    3. mpayer にパスを通す.

    mplayer2 では動かなかった.

** volume
   volume 制御だってできる, そう Emacs ならね.
   - https://github.com/dbrock/volume-el
   mcvc というフリーソフト, 404 になっちゃた.
   - [[http://qiita.com/natsutan/items/706a7ee72008abda8842][Windows の音量を Emacs から制御する - Qiita]]

#+begin_src emacs-lisp
(when windows-p
(defun volume-raise ()
  (interactive)
  (call-process "mcvc.exe" nil nil nil "m+10"))
(defun volume-lower ()
  (interactive)
  (call-process "mcvc.exe" nil nil nil "m-10")))

(when linux-p
  (use-package volume))

(defhydra hydra-volume (global-map "C-x 7")
  "volume"
  ("+" volume-raise "up")
  ("-" volume-lower "down"))
 #+end_src

** mpsyt
   mps-youtube

#+begin_src emacs-lisp
(defun mpsyt ()
  (interactive)
  (toggle-frame-fullscreen)
  (ansi-term "mpsyt" "mpsyt"))
#+end_src

* Dictionary: 辞書
** search-web
    無料でオンラインの英辞郎 on the WEB をサクッと利用する.

    - [[https://github.com/tomoya/search-web.el/tree/master][tomoya/search-web.el]]
    - [[http://qiita.com/akisute3@github/items/8deb54b75b48e8b04cb0][Emacs 使用中に素早く検索する - Qiita]]
    - [[http://d.hatena.ne.jp/tomoya/20090703/1246610432][Emacs ですぐに単語の検索をしたい欲望を叶える Elisp. - 日々, とん
      は語る. ]]

    とくに, キーバインドはつけてない.

#+begin_src emacs-lisp
(use-package search-web :defer t)
;; 英辞郎 ... なんかうごかないな.
;; (define-key global-map (kbd "C-x g e") (lambda () (interactive) (search-web-at-point "eow")))
;; (define-key global-map (kbd "C-x g C-e") (lambda () (interactive) (search-web-region "eow")))
#+end_src

** codic
   エンジニアのためのネーミング辞書.

   M-x codic xxx

#+begin_src emacs-lisp
(use-package codic :defer t)
#+end_src

* 時間
** chronos/ helm-chronos
   - https://github.com/dxknight/chronos
   - https://github.com/dxknight/helm-chronos

  通知のために gntp-send を入れた.
  - https://github.com/mattn/gntp-send
   
#+begin_src emacs-lisp
(use-package helm-chronos
  :disabled t
  :init (setq helm-chronos-standard-timers
              '("    25/Pomodoro"
                "    3/Pomodoro_Break"))
  :bind (("C-c C-x t" . helm-chronos-add-timer))
  :config
  (setq chronos-shell-notify-program "gntp-send"
        chronos-shell-notify-parameters '("clock-out"
                                          "Good Job (^o^)/"))
  
  (setq chronos-expiry-functions '(chronos-shell-notify
                                   ;; chronos-desktop-notifications-notify                                   
                                   chronos-message-notify
                                   chronos-buffer-notify)))
#+end_src

** Pomodoro: ポモドーロ
   ポモドーロ関係のツール.
   - [[http://pomodorotechnique.com/][HOME - The Pomodoro Technique ® The Pomodoro Technique ®]]

*** 一覧
   - https://github.com/konr/tomatinho
   - http://ivan.kanis.fr/pomodoro.el
   - https://github.com/lolownia/org-pomodoro
   - https://github.com/baudtack/pomodoro.el

*** tomatinho
   ちょっとかわったポモドーロツール.
   - https://github.com/konr/tomatinho

   使わないので一旦封印.

 #+begin_src emacs-lisp
(use-package tomatinho
  :disabled t
  :bind "C-x <f6>"
  :config
  (define-key tomatinho-map (kbd "N") 'tomatinho-interactive-new-pomodoro)
  (define-key tomatinho-map (kbd "P") 'tomatinho-interactive-deliberate-pause)
  (define-key tomatinho-map (kbd "T") 'tomatinho-interactive-toggle-display))
 #+end_src

*** pomodoro.el
    なんか, pomodoro.el が 同じ名前で 3 つもある気がする.
    とりあえず, el-get のレシピがあったものを利用.

    - [[https://github.com/syohex/emacs-utils][syohex/emacs-utils]]
    - [[http://d.hatena.ne.jp/syohex/20121215/1355579575][Emacs でポモドーロテクニック - Life is very short]]

    使わないので一旦封印.

 #+begin_src emacs-lisp
;; (use-package pomodoro)

;; (when linux-p
;; ;; hook 関数関連
;; (use-package notifications)
;; (defun* my/pomodoro-notification (&key (title "Pomodoro")
;;                                        body
;;                                        (urgency 'normal))
;;   (notifications-notify :title title :body body :urgency urgency))

;; ;; 作業終了後の hook
;; (add-hook 'pomodoro:finish-work-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Work is Finish")
;; 	    (rest)
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))

;; ;; 休憩終了後の hook
;; (add-hook 'pomodoro:finish-rest-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Break time is finished")
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))
;; )
 #+end_src

* Desktop 関係
 デスクトップ通知はデフォルトで機能がある(24 より)
 - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html][GNU Emacs Lisp Reference Manual: Desktop Notifications]]

** gntp
   Growl for linux/windows
   - [[http://sheephead.homelinux.org/2015/01/06/7197/][Growl に gntp 経由で通知させる gntp.el の紹介 - sheephead]]

   gol で Growl サーバ起動.

#+begin_src emacs-lisp
(use-package gntp)
#+end_src

* その他
** pdf-tools
   PDF Viewer. Emacs で PDF がみれるという画期的なツールだ.
   - https://github.com/politza/pdf-tools
   - http://www.dailymotion.com/video/x2bc1is_pdf-tools-tourdeforce_tech?forcedQuality%3Dhd720
   - http://sheephead.homelinux.org/2014/03/17/7076/

   github のやつだと, コンパイルエラーするので, fork して無理やり通した.
   -> patch とりこまれた

   ArchLinux では, GhostScript を入れる.

 #+begin_src text
sudo pacman -S ghostscript
 #+end_src

   うーん, minor-mode が hook で有効にならないな...

 #+begin_src emacs-lisp
(use-package pdf-tools
  :disabled t
  :if linux-p
  :init
  (setq pdf-info-epdfinfo-program
	(concat (el-get-package-directory "pdf-tools") "server/epdfinfo"))
  (add-hook 'pdf-view-mode-hook 'pdf-tools-enable-minor-modes)
  ;; (add-hook 'pdf-tools-enabled-hook 'pdf-tools-enable-minor-modes)
  :mode (("\\.pdf$" . pdf-view-mode))
  :config
  (setq pdf-util-convert-program "/usr/bin/convert -font Ricty-Bold")
  (setq pdf-view-use-imagemagick t)
  (setq pdf-view-use-scaling t)
  (setq pdf-view-display-size 'fit-page))

	      ;; (use-package pdf-isearch)
	      ;; (use-package pdf-annot)
	      ;; (use-package pdf-history) 
	      ;; (use-package pdf-info)
	      ;; (use-package pdf-links) 
	      ;; (use-package pdf-misc) 
	      ;; (use-package pdf-occur) 
	      ;; (use-package pdf-outline) 
	      ;; (use-package pdf-sync) 
	      ;; (use-package tablist-filter)
	      ;; (use-package tablist))))
 #+end_src

*** linum-mode は無効に
    どうも, doc-view-mode がめちゃくちゃ遅い!linum-mode が有効なことが原因.
    以下のページを参考に, major-mode が 
    - doc-view-mode
    - pdf-view-mode
    のときは, linum-mode は disable に.
    - [[http://stackoverflow.com/questions/16132234/how-can-i-speed-up-emacs-docview-mode][How can I speed up Emacs DocView mode? - Stack Overflow]]

*** font がへん
    フォントがへんになるのは, poppler のせい.

    読むときは doc-view-mode C-c C-c にすることにした... or2.

*** WIndows 環境
    頑張ってる. まだうごかない.

    - libglib
    - libglib-dev
    - libpopper
    - libpoppwer-glib8
** calfw
   Emacs 用カレンダー.
   -> org-mode に移動.

** psession
   セッション保存. elscreen に対応してくれないかな. . .
   - [[https://github.com/thierryvolpiatto/psession][thierryvolpiatto/psession]]
   - [[http://rubikitch.com/2014/08/21/psession/][Emacs のデータ・バッファ・ウィンドウ構成を永続化し, 再起動時に復元する方法 るびきち× Emacs]]

   -> elscreen-persist に以降したので一旦封印.

 #+begin_src emacs-lisp
(use-package psession
  :disabled t
  :config
  (autoload 'psession-mode "persistent-sessions.el")
  (psession-mode 1))
 #+end_src
** ledger-mode
   お金管理.

*** reckon
    CSV 形式を ledger 形式に変換するツール.
    - https://github.com/cantino/reckon
    - [[http://blog.andrewcantino.com/blog/2010/11/06/command-line-accounting-with-ledger-and-reckon/][How I Do Command-line Accounting: Ledger and Reckon - andrew makes things]]

*** Emacs Setting
   - [[http://www.ledger-cli.org/3.0/doc/ledger-mode.html][Ledger: Command-Line Accounting]]
 
   org-capture との連携
   - [[http://sachachua.com/blog/2010/11/emacs-recording-ledger-entries-with-org-capture-templates/][Emacs: Recording ledger entries with org-capture-templates - sacha chua]]

 #+begin_src emacs-lisp
(use-package ledger-mode
  :disabled t
  :load-path "~/.emacs.d/el-get/repo/ledger-mode/lisp"
  :init
  (add-to-list 'auto-mode-alist '("\\.dat$" . ledger-mode))

  :config
  ;; エントリを一番したにコピー
  (defun vk-copy-ledger-entry-to-bottom ()
    "Copy the current transaction to the bottom of the ledger"
    "https://gist.github.com/vkurup/231520"
    (interactive)
    (re-search-backward "^[12][90]")
  (let ((beg (point)))
    (forward-char)
    (re-search-forward "^[12][90]")
    (beginning-of-line)
    (copy-region-as-kill beg (point))
    (goto-char (point-max))
    (yank '(non nil list))
    (forward-word)
    (forward-char)))
  )
 #+end_src

*** flycheck-ledger
    - https://github.com/purcell/flycheck-ledger

#+begin_src emacs-lisp
;; (with-eval-after-load 'flycheck
;;   '(use-package flycheck-ledger))
#+end_src

*** org-mode
    legder -f xx org とかくと, org-table 形式で出力.
    - [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ledger.html][Using Ledger for Accounting in Org-mode with Babel]]
    - [[http://orgmode.org/worg/org-tutorials/weaving-a-budget.html][Weaving a budget with Org & ledger]]

*** Bookmarks
    - [[https://billalex.wordpress.com/2013/05/01/ledger-nix-cli-double-entry-accounting/#][Ledger – *nix cli bookkeeping | Bills Blog]]

** fcitx
   fcitx がうまくうごかない.

#+begin_src emacs-lisp
(use-package fcitx
  :if linux-p
  :config
  (fcitx-default-setup)  
  ;;  (fcitx-aggressive-setup)
  (fcitx-prefix-keys-setup)
  (fcitx-prefix-keys-turn-on))
#+end_src

** emoji-cheat-sheet-plus
   - https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus

#+begin_src emacs-lisp
(use-package emoji-cheat-sheet-plus
  :disabled t
  :init
  (progn
    ;; enabled emoji in buffer
    (add-hook 'org-mode-hook 'emoji-cheat-sheet-plus-display-mode)
    ;; insert emoji with helm
    (global-set-key (kbd "C-c C-e") 'emoji-cheat-sheet-plus-insert)))
#+end_src

** aoj-submit
   AOJ の提出用 Elisp
   - https://github.com/ottati/aoj-submit-el
   - http://ottati.hatenablog.com/entry/2015/06/16/071410#

#+begin_src emacs-lisp
(use-package aoj-submit
  :config
  (setq aoj-id (netrc-get (netrc-machine (netrc-parse "~/.netrc") "aoj" t) "login"))
  (setq aoj-password (netrc-get (netrc-machine (netrc-parse "~/.netrc") "aoj" t) "password")))
#+end_src

** cfparser
   Codeforces のツール
   - https://github.com/gnull/cfparser

#+begin_src emacs-lisp
(use-package cf-mode
  :config
  (setq cf-default-language cf-pl-python-2)
  (setq cf-test-command
        (concat
         "for i in `ls *.in | sed 's/.in//'`; do "
         "echo test $i; "
         "python2 sol.py < $i.in | diff - $i.out; "
         "done;"))
  )
#+end_src


* Tips
** slimlock
   Emacs から一時停止.

#+begin_src emacs-lisp
(defun slimlock ()
  (interactive)
  (shell-command "slimlock"))
#+end_src

** meigen

#+begin_src emacs-lisp
(defun set-my-meigen ()
  (interactive) (setq cookie-file   "~/.emacs.d/meigen/meigen.txt"))
(defun set-rubi-meigen ()
  (interactive) (setq cookie-file "~/.emacs.d/meigen/quotes.txt"))

(setq cookie-file "~/.emacs.d/meigen/meigen.txt")
(defhydra hydra-meigen (global-map "C-x ,")
  "meigen"
  ("," cookie "meigen")
  ("r" set-rubi-meigen "rubi-meigen")
  ("f" (find-file cookie-file) "open meigen")
  ("m" set-my-meigen "my-meigen"))
#+end_src
